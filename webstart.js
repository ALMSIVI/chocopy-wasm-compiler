(()=>{"use strict";var t={n:e=>{var i=e&&e.__esModule?()=>e.default:()=>e;return t.d(i,{a:i}),i},d:(e,i)=>{for(var r in i)t.o(i,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:i[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};const e=wabt;var i,r,s=t.n(e);function n(t,e){switch(t.tag){case"number":return{tag:"num",value:e};case"bool":return{tag:"bool",value:Boolean(e)};case"class":return i=t.name,0===(r=e)?{tag:"none"}:{tag:"object",name:i,address:r};case"none":return{tag:"none"}}var i,r}!function(t){t[t.Plus=0]="Plus",t[t.Minus=1]="Minus",t[t.Mul=2]="Mul",t[t.IDiv=3]="IDiv",t[t.Mod=4]="Mod",t[t.Eq=5]="Eq",t[t.Neq=6]="Neq",t[t.Lte=7]="Lte",t[t.Gte=8]="Gte",t[t.Lt=9]="Lt",t[t.Gt=10]="Gt",t[t.Is=11]="Is",t[t.And=12]="And",t[t.Or=13]="Or"}(i||(i={})),function(t){t[t.Neg=0]="Neg",t[t.Not=1]="Not"}(r||(r={}));const O={tag:"number"},a={tag:"bool"},o={tag:"none"};function l(t){return{tag:"class",name:t}}function h(t){const e=[];return t.forEach((t=>{e.push(`(local $${t} i32)`)})),e}function f(t,e){if(!t.globals.has(e))throw console.log("Could not find "+e+" in ",t),new Error("Could not find name "+e);return 4*t.globals.get(e)}function c(t,e){switch(t.tag){case"return":return(i=Q(t.value,e)).push("return"),i;case"assign":var i=Q(t.value,e);return e.locals.has(t.name)?i.concat([`(local.set $${t.name})`]):[`(i32.const ${f(e,t.name)}) ;; ${t.name}`].concat(i).concat(["(i32.store)"]);case"expr":return Q(t.expr,e).concat(["(local.set $$last)"]);case"if":var r=Q(t.cond,e),s=t.thn.map((t=>c(t,e))).flat(),n=t.els.map((t=>c(t,e))).flat();return[`${r.join("\n")} \n (if (then ${s.join("\n")}) (else ${n.join("\n")}))`];case"while":var O=Q(t.cond,e);return[`(block (loop  ${t.body.map((t=>c(t,e))).flat().join("\n")} (br_if 0 ${O.join("\n")}) (br 1) ))`];case"pass":return[];case"field-assign":var a=Q(t.obj,e),o=t.obj.a;if("class"!==o.tag)throw new Error("Report this as a bug to the compiler developer, this shouldn't happen "+o.tag);var l=o.name,[h,u]=e.classes.get(l).get(t.field);return i=Q(t.value,e),[...a,`(i32.add (i32.const ${4*h}))`,...i,"(i32.store)"]}}function u(t,e){const i=d(t.value);return e.locals.has(t.name)?[...i,`(local.set $${t.name})`]:[`(i32.const ${f(e,t.name)}) ;; ${t.name}`].concat(i).concat(["(i32.store)"])}function p(t,e){var i=new Set;t.inits.forEach((t=>i.add(t.name))),i.add("$last"),i.forEach(e.locals.add,e.locals),t.parameters.forEach((t=>e.locals.add(t.name)));const r=h(i).join("\n"),s=t.inits.map((t=>u(t,e))).flat().join("\n");var n=t.parameters.map((t=>`(param $${t.name} i32)`)).join(" "),O=t.body.map((t=>c(t,e))).flat().join("\n");return e.locals.clear(),[`(func $${t.name} ${n} (result i32)\n    ${r}\n    ${s}\n    ${O}\n    (i32.const 0)\n    (return))`]}function Q(t,e){switch(t.tag){case"builtin1":const S=t.a,$=Q(t.arg,e);var i=t.name;return"print"===t.name&&S===O?i="print_num":"print"===t.name&&S===a?i="print_bool":"print"===t.name&&S===o&&(i="print_none"),$.concat([`(call $${i})`]);case"builtin2":return[...Q(t.left,e),...Q(t.right,e),`(call $${t.name})`];case"literal":return d(t.value);case"id":return e.locals.has(t.name)?[`(local.get $${t.name})`]:[`(i32.const ${f(e,t.name)})`,"(i32.load)"];case"binop":return[...Q(t.left,e),...Q(t.right,e),m(t.op)];case"uniop":const x=Q(t.expr,e);switch(t.op){case r.Neg:return["(i32.const 0)",...x,"(i32.sub)"];case r.Not:return["(i32.const 0)",...x,"(i32.eq)"]}case"call":var s=t.arguments.map((t=>Q(t,e))).flat();return s.push(`(call $${t.name})`),s;case"construct":var n=[];return e.classes.get(t.name).forEach((([t,e],i)=>n.push("(i32.load (i32.const 0))",`(i32.add (i32.const ${4*t}))`,...d(e),"(i32.store)"))),n.concat(["(i32.load (i32.const 0))","(i32.load (i32.const 0))","(i32.const 0)","(i32.load (i32.const 0))",`(i32.add (i32.const ${4*e.classes.get(t.name).size}))`,"(i32.store)",`(call $${t.name}$__init__)`,"(drop)"]);case"method-call":var l=Q(t.obj,e);if("class"!==(u=t.obj.a).tag)throw new Error("Report this as a bug to the compiler developer, this shouldn't happen "+u.tag);var h=u.name,c=t.arguments.map((t=>Q(t,e))).flat();return[...l,...c,`(call $${h}$${t.method})`];case"lookup":var u;if(l=Q(t.obj,e),"class"!==(u=t.obj.a).tag)throw new Error("Report this as a bug to the compiler developer, this shouldn't happen "+u.tag);h=u.name;var[p,g]=e.classes.get(h).get(t.field);return[...l,`(i32.add (i32.const ${4*p}))`,"(i32.load)"]}}function d(t){switch(t.tag){case"num":return["(i32.const "+t.value+")"];case"bool":return[`(i32.const ${Number(t.value)})`];case"none":return["(i32.const 0)"]}}function m(t){switch(t){case i.Plus:return"(i32.add)";case i.Minus:return"(i32.sub)";case i.Mul:return"(i32.mul)";case i.IDiv:return"(i32.div_s)";case i.Mod:return"(i32.rem_s)";case i.Eq:return"(i32.eq)";case i.Neq:return"(i32.ne)";case i.Lte:return"(i32.le_s)";case i.Gte:return"(i32.ge_s)";case i.Lt:return"(i32.lt_s)";case i.Gt:return"(i32.gt_s)";case i.Is:return"(i32.eq)";case i.And:return"(i32.and)";case i.Or:return"(i32.or)"}}new Map,new Map,new Set;const g=1024;let S=0;const $=new WeakMap;class x{constructor({deserialize:t}={}){this.id=S++,this.deserialize=t||(()=>{throw new Error("This node type doesn't define a deserialize function")})}static string(){return new x({deserialize:t=>t})}static number(){return new x({deserialize:Number})}static flag(){return new x({deserialize:()=>!0})}set(t,e){return t[this.id]=e,t}add(t){return"function"!=typeof t&&(t=y.match(t)),e=>{let i=t(e);return void 0===i?null:[this,i]}}}x.closedBy=new x({deserialize:t=>t.split(" ")}),x.openedBy=new x({deserialize:t=>t.split(" ")}),x.group=new x({deserialize:t=>t.split(" ")});const b=Object.create(null);class y{constructor(t,e,i,r=0){this.name=t,this.props=e,this.id=i,this.flags=r}static define(t){let e=t.props&&t.props.length?Object.create(null):b,i=(t.top?1:0)|(t.skipped?2:0)|(t.error?4:0)|(null==t.name?8:0),r=new y(t.name||"",e,t.id,i);if(t.props)for(let i of t.props)Array.isArray(i)||(i=i(r)),i&&i[0].set(e,i[1]);return r}prop(t){return this.props[t.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(t){if("string"==typeof t){if(this.name==t)return!0;let e=this.prop(x.group);return!!e&&e.indexOf(t)>-1}return this.id==t}static match(t){let e=Object.create(null);for(let i in t)for(let r of i.split(" "))e[r]=t[i];return t=>{for(let i=t.prop(x.group),r=-1;r<(i?i.length:0);r++){let s=e[r<0?t.name:i[r]];if(s)return s}}}}y.none=new y("",Object.create(null),0,8);class P{constructor(t){this.types=t;for(let e=0;e<t.length;e++)if(t[e].id!=e)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...t){let e=[];for(let i of this.types){let r=null;for(let e of t){let t=e(i);t&&(r||(r=Object.assign({},i.props)),t[0].set(r,t[1]))}e.push(r?new y(i.name,r,i.id,i.flags):i)}return new P(e)}}class L{constructor(t,e,i,r){this.type=t,this.children=e,this.positions=i,this.length=r}toString(){let t=this.children.map((t=>t.toString())).join();return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(t.length?"("+t+")":""):t}cursor(t,e=0){let i=null!=t&&$.get(this)||this.topNode,r=new v(i);return null!=t&&(r.moveTo(t,e),$.set(this,r._tree)),r}fullCursor(){return new v(this.topNode,!0)}get topNode(){return new w(this,0,0,null)}resolve(t,e=0){return this.cursor(t,e).node}iterate(t){let{enter:e,leave:i,from:r=0,to:s=this.length}=t;for(let t=this.cursor();;){let n=!1;if(t.from<=s&&t.to>=r&&(t.type.isAnonymous||!1!==e(t.type,t.from,t.to))){if(t.firstChild())continue;t.type.isAnonymous||(n=!0)}for(;n&&i&&i(t.type,t.from,t.to),n=t.type.isAnonymous,!t.nextSibling();){if(!t.parent())return;n=!0}}}balance(t=g){return this.children.length<=T?this:j(this.type,y.none,this.children,this.positions,0,this.children.length,0,t,this.length)}static build(t){return function(t){var e;let{buffer:i,nodeSet:r,topID:s=0,maxBufferLength:n=g,reused:O=[],minRepeatType:a=r.types.length}=t,o=Array.isArray(i)?new _(i,i.length):i,l=r.types;function h(t,e,i,s,c){let{id:u,start:p,end:Q,size:d}=o;for(;u==c;)o.next(),({id:u,start:p,end:Q,size:d}=o);let m=p-t;if(d<0)return i.push(O[u]),s.push(m),void o.next();let g,S,$=l[u];if(Q-p<=n&&(S=function(t,e){let i=o.fork(),r=0,s=0,O=0,l=i.end-n,h={size:0,start:0,skip:0};t:for(let n=i.pos-t;i.pos>n;){if(i.id==e){h.size=r,h.start=s,h.skip=O,O+=4,r+=4,i.next();continue}let t=i.size,o=i.pos-t;if(t<0||o<n||i.start<l)break;let f=i.id>=a?4:0,c=i.start;for(i.next();i.pos>o;){if(i.size<0)break t;i.id>=a&&(f+=4),i.next()}s=c,r+=t,O+=f}return(e<0||r==t)&&(h.size=r,h.start=s,h.skip=O),h.size>4?h:void 0}(o.pos-e,c))){let e=new Uint16Array(S.size-S.skip),i=o.pos-S.size,s=e.length;for(;o.pos>i;)s=f(S.start,e,s,c);g=new X(e,Q-S.start,r,c<0?y.none:l[c]),m=S.start-t}else{let t=o.pos-d;o.next();let e=[],i=[],r=u>=a?u:-1;for(;o.pos>t;)h(p,t,e,i,r);e.reverse(),i.reverse(),g=r>-1&&e.length>T?j($,$,e,i,0,e.length,0,n,Q-p):new L($,e,i,Q-p)}i.push(g),s.push(m)}function f(t,e,i,r){let{id:s,start:n,end:O,size:l}=o;if(o.next(),s==r)return i;let h=i;if(l>4){let s=o.pos-(l-4);for(;o.pos>s;)i=f(t,e,i,r)}return s<a&&(e[--i]=h,e[--i]=O-t,e[--i]=n-t,e[--i]=s),i}let c=[],u=[];for(;o.pos>0;)h(t.start||0,0,c,u,-1);let p=null!==(e=t.length)&&void 0!==e?e:c.length?u[0]+c[0].length:0;return new L(l[s],c.reverse(),u.reverse(),p)}(t)}}L.empty=new L(y.none,[],[],0);class X{constructor(t,e,i,r=y.none){this.buffer=t,this.length=e,this.set=i,this.type=r}toString(){let t=[];for(let e=0;e<this.buffer.length;)t.push(this.childString(e)),e=this.buffer[e+3];return t.join(",")}childString(t){let e=this.buffer[t],i=this.buffer[t+3],r=this.set.types[e],s=r.name;if(/\W/.test(s)&&!r.isError&&(s=JSON.stringify(s)),i==(t+=4))return s;let n=[];for(;t<i;)n.push(this.childString(t)),t=this.buffer[t+3];return s+"("+n.join(",")+")"}findChild(t,e,i,r){let{buffer:s}=this,n=-1;for(let O=t;O!=e;O=s[O+3])if(-1e8!=r){let t=s[O+1],e=s[O+2];if(i>0){if(e>r&&(n=O),e>r)break}else if(t<r&&(n=O),e>=r)break}else if(n=O,i>0)break;return n}}class w{constructor(t,e,i,r){this.node=t,this.from=e,this.index=i,this._parent=r}get type(){return this.node.type}get name(){return this.node.type.name}get to(){return this.from+this.node.length}nextChild(t,e,i,r=!1){for(let s=this;;){for(let{children:n,positions:O}=s.node,a=e>0?n.length:-1;t!=a;t+=e){let a=n[t],o=O[t]+s.from;if(-1e8==i||!(e<0?o>=i:o+a.length<=i))if(a instanceof X){let r=a.findChild(0,a.buffer.length,e,-1e8==i?-1e8:i-o);if(r>-1)return new k(new q(s,a,t,o),null,r)}else if(r||!a.type.isAnonymous||R(a)){let n=new w(a,o,t,s);return r||!n.type.isAnonymous?n:n.nextChild(e<0?a.children.length-1:0,e,i)}}if(r||!s.type.isAnonymous)return null;if(t=s.index+e,s=s._parent,!s)return null}}get firstChild(){return this.nextChild(0,1,-1e8)}get lastChild(){return this.nextChild(this.node.children.length-1,-1,-1e8)}childAfter(t){return this.nextChild(0,1,t)}childBefore(t){return this.nextChild(this.node.children.length-1,-1,t)}nextSignificantParent(){let t=this;for(;t.type.isAnonymous&&t._parent;)t=t._parent;return t}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent?this._parent.nextChild(this.index+1,1,-1):null}get prevSibling(){return this._parent?this._parent.nextChild(this.index-1,-1,-1):null}get cursor(){return new v(this)}resolve(t,e=0){return this.cursor.moveTo(t,e).node}getChild(t,e=null,i=null){let r=U(this,t,e,i);return r.length?r[0]:null}getChildren(t,e=null,i=null){return U(this,t,e,i)}toString(){return this.node.toString()}}function U(t,e,i,r){let s=t.cursor,n=[];if(!s.firstChild())return n;if(null!=i)for(;!s.type.is(i);)if(!s.nextSibling())return n;for(;;){if(null!=r&&s.type.is(r))return n;if(s.type.is(e)&&n.push(s.node),!s.nextSibling())return null==r?n:[]}}class q{constructor(t,e,i,r){this.parent=t,this.buffer=e,this.index=i,this.start=r}}class k{constructor(t,e,i){this.context=t,this._parent=e,this.index=i,this.type=t.buffer.set.types[t.buffer.buffer[i]]}get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}child(t,e){let{buffer:i}=this.context,r=i.findChild(this.index+4,i.buffer[this.index+3],t,-1e8==e?-1e8:e-this.context.start);return r<0?null:new k(this.context,this,r)}get firstChild(){return this.child(1,-1e8)}get lastChild(){return this.child(-1,-1e8)}childAfter(t){return this.child(1,t)}childBefore(t){return this.child(-1,t)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(t){return this._parent?null:this.context.parent.nextChild(this.context.index+t,t,-1)}get nextSibling(){let{buffer:t}=this.context,e=t.buffer[this.index+3];return e<(this._parent?t.buffer[this._parent.index+3]:t.buffer.length)?new k(this.context,this._parent,e):this.externalSibling(1)}get prevSibling(){let{buffer:t}=this.context,e=this._parent?this._parent.index+4:0;return this.index==e?this.externalSibling(-1):new k(this.context,this._parent,t.findChild(e,this.index,-1,-1e8))}get cursor(){return new v(this)}resolve(t,e=0){return this.cursor.moveTo(t,e).node}toString(){return this.context.buffer.childString(this.index)}getChild(t,e=null,i=null){let r=U(this,t,e,i);return r.length?r[0]:null}getChildren(t,e=null,i=null){return U(this,t,e,i)}}class v{constructor(t,e=!1){if(this.full=e,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,t instanceof w)this.yieldNode(t);else{this._tree=t.context.parent,this.buffer=t.context;for(let e=t._parent;e;e=e._parent)this.stack.unshift(e.index);this.bufferNode=t,this.yieldBuf(t.index)}}get name(){return this.type.name}yieldNode(t){return!!t&&(this._tree=t,this.type=t.type,this.from=t.from,this.to=t.to,!0)}yieldBuf(t,e){this.index=t;let{start:i,buffer:r}=this.buffer;return this.type=e||r.set.types[r.buffer[t]],this.from=i+r.buffer[t+1],this.to=i+r.buffer[t+2],!0}yield(t){return!!t&&(t instanceof w?(this.buffer=null,this.yieldNode(t)):(this.buffer=t.context,this.yieldBuf(t.index,t.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enter(t,e){if(!this.buffer)return this.yield(this._tree.nextChild(t<0?this._tree.node.children.length-1:0,t,e,this.full));let{buffer:i}=this.buffer,r=i.findChild(this.index+4,i.buffer[this.index+3],t,-1e8==e?-1e8:e-this.buffer.start);return!(r<0)&&(this.stack.push(this.index),this.yieldBuf(r))}firstChild(){return this.enter(1,-1e8)}lastChild(){return this.enter(-1,-1e8)}childAfter(t){return this.enter(1,t)}childBefore(t){return this.enter(-1,t)}parent(){if(!this.buffer)return this.yieldNode(this.full?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let t=this.full?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(t)}sibling(t){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree._parent.nextChild(this._tree.index+t,t,-1e8,this.full));let{buffer:e}=this.buffer,i=this.stack.length-1;if(t<0){let t=i<0?0:this.stack[i]+4;if(this.index!=t)return this.yieldBuf(e.findChild(t,this.index,-1,-1e8))}else{let t=e.buffer[this.index+3];if(t<(i<0?e.buffer.length:e.buffer[this.stack[i]+3]))return this.yieldBuf(t)}return i<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+t,t,-1e8,this.full))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(t){let e,i,{buffer:r}=this;if(r){if(t>0){if(this.index<r.buffer.buffer.length)return!1}else for(let t=0;t<this.index;t++)if(r.buffer.buffer[t+3]<this.index)return!1;({index:e,parent:i}=r)}else({index:e,_parent:i}=this._tree);for(;i;({index:e,_parent:i}=i))for(let r=e+t,s=t<0?-1:i.node.children.length;r!=s;r+=t){let t=i.node.children[r];if(this.full||!t.type.isAnonymous||t instanceof X||R(t))return!1}return!0}move(t){if(this.enter(t,-1e8))return!0;for(;;){if(this.sibling(t))return!0;if(this.atLastNode(t)||!this.parent())return!1}}next(){return this.move(1)}prev(){return this.move(-1)}moveTo(t,e=0){for(;(this.from==this.to||(e<1?this.from>=t:this.from>t)||(e>-1?this.to<=t:this.to<t))&&this.parent(););for(;e<0?this.childBefore(t):this.childAfter(t);)if(this.from==this.to||(e<1?this.from>=t:this.from>t)||(e>-1?this.to<=t:this.to<t)){this.parent();break}return this}get node(){if(!this.buffer)return this._tree;let t=this.bufferNode,e=null,i=0;if(t&&t.context==this.buffer)t:for(let r=this.index,s=this.stack.length;s>=0;){for(let n=t;n;n=n._parent)if(n.index==r){if(r==this.index)return n;e=n,i=s+1;break t}r=this.stack[--s]}for(let t=i;t<this.stack.length;t++)e=new k(this.buffer,e,this.stack[t]);return this.bufferNode=new k(this.buffer,e,this.index)}get tree(){return this.buffer?null:this._tree.node}}function R(t){return t.children.some((t=>!t.type.isAnonymous||t instanceof X||R(t)))}class _{constructor(t,e){this.buffer=t,this.index=e}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new _(this.buffer,this.index)}}const T=8;function j(t,e,i,r,s,n,O,a,o){let l=[],h=[];if(o<=a)for(let t=s;t<n;t++)l.push(i[t]),h.push(r[t]-O);else{let t=Math.max(a,Math.ceil(1.5*o/T));for(let o=s;o<n;){let s=o,f=r[o];for(o++;o<n&&!(r[o]+i[o].length-f>t);o++);if(o==s+1){let r=i[s];if(r instanceof L&&r.type==e&&r.length>t<<1){for(let t=0;t<r.children.length;t++)l.push(r.children[t]),h.push(r.positions[t]+f-O);continue}l.push(r)}else if(o==s+1)l.push(i[s]);else{let t=j(e,e,i,r,s,o,f,a,r[o-1]+i[o-1].length-f);e==y.none||E(t.children,e)||(t=new L(y.none,t.children,t.positions,t.length)),l.push(t)}h.push(f-O)}}return new L(t,l,h,o)}function E(t,e){for(let i of t)if(i.type==e)return!0;return!1}function G(t){return new V(t)}class V{constructor(t,e=t.length){this.string=t,this.length=e}get(t){return t<0||t>=this.length?-1:this.string.charCodeAt(t)}lineAfter(t){if(t<0)return"";let e=this.string.indexOf("\n",t);return this.string.slice(t,e<0?this.length:Math.min(e,this.length))}read(t,e){return this.string.slice(t,Math.min(this.length,e))}clip(t){return new V(this.string,t)}}class W{constructor(t,e,i,r,s,n,O,a,o){this.cx=t,this.stack=e,this.state=i,this.reducePos=r,this.pos=s,this.score=n,this.buffer=O,this.bufferBase=a,this.parent=o}toString(){return`[${this.stack.filter(((t,e)=>e%3==0)).concat(this.state)}]@${this.pos}${this.score?"!"+this.score:""}`}static start(t,e,i=0){return new W(t,[],e,i,i,0,[],0,null)}pushState(t,e){this.stack.push(this.state,e,this.bufferBase+this.buffer.length),this.state=t}reduce(t){let e=t>>19,i=65535&t,{parser:r}=this.cx,s=r.dynamicPrecedence(i);if(s&&(this.score+=s),0==e)return i<r.minRepeatTerm&&this.storeNode(i,this.reducePos,this.reducePos,4,!0),void this.pushState(r.getGoto(this.state,i,!0),this.reducePos);let n=this.stack.length-3*(e-1)-(262144&t?6:0),O=this.stack[n-2],a=this.stack[n-1],o=this.bufferBase+this.buffer.length-a;if(i<r.minRepeatTerm||131072&t){let t=r.stateFlag(this.state,1)?this.pos:this.reducePos;this.storeNode(i,O,t,o+4,!0)}if(262144&t)this.state=this.stack[n];else{let t=this.stack[n-3];this.state=r.getGoto(t,i,!0)}for(;this.stack.length>n;)this.stack.pop()}storeNode(t,e,i,r=4,s=!1){if(0==t){let t=this,r=this.buffer.length;if(0==r&&t.parent&&(r=t.bufferBase-t.parent.bufferBase,t=t.parent),r>0&&0==t.buffer[r-4]&&t.buffer[r-1]>-1){if(e==i)return;if(t.buffer[r-2]>=e)return void(t.buffer[r-2]=i)}}if(s&&this.pos!=i){let s=this.buffer.length;if(s>0&&0!=this.buffer[s-4])for(;s>0&&this.buffer[s-2]>i;)this.buffer[s]=this.buffer[s-4],this.buffer[s+1]=this.buffer[s-3],this.buffer[s+2]=this.buffer[s-2],this.buffer[s+3]=this.buffer[s-1],s-=4,r>4&&(r-=4);this.buffer[s]=t,this.buffer[s+1]=e,this.buffer[s+2]=i,this.buffer[s+3]=r}else this.buffer.push(t,e,i,r)}shift(t,e,i){if(131072&t)this.pushState(65535&t,this.pos);else if(0==(262144&t)){let r=this.pos,s=t,{parser:n}=this.cx;(i>this.pos||e<=n.maxNode)&&(this.pos=i,n.stateFlag(s,1)||(this.reducePos=i)),this.pushState(s,r),e<=n.maxNode&&this.buffer.push(e,r,i,4)}else e<=this.cx.parser.maxNode&&this.buffer.push(e,this.pos,i,4),this.pos=i}apply(t,e,i){65536&t?this.reduce(t):this.shift(t,e,i)}useNode(t,e){let i=this.cx.reused.length-1;(i<0||this.cx.reused[i]!=t)&&(this.cx.reused.push(t),i++);let r=this.pos;this.reducePos=this.pos=r+t.length,this.pushState(e,r),this.buffer.push(i,r,this.reducePos,-1)}split(){let t=this,e=t.buffer.length;for(;e>0&&t.buffer[e-2]>t.reducePos;)e-=4;let i=t.buffer.slice(e),r=t.bufferBase+e;for(;t&&r==t.bufferBase;)t=t.parent;return new W(this.cx,this.stack.slice(),this.state,this.reducePos,this.pos,this.score,i,r,t)}recoverByDelete(t,e){let i=t<=this.cx.parser.maxNode;i&&this.storeNode(t,this.pos,e),this.storeNode(0,this.pos,e,i?8:4),this.pos=this.reducePos=e,this.score-=200}canShift(t){for(let e=new z(this);;){let i=this.cx.parser.stateSlot(e.top,4)||this.cx.parser.hasAction(e.top,t);if(0==(65536&i))return!0;if(0==i)return!1;e.reduce(i)}}get ruleStart(){for(let t=this.state,e=this.stack.length;;){let i=this.cx.parser.stateSlot(t,5);if(!(65536&i))return 0;if(e-=3*(i>>19),(65535&i)<this.cx.parser.minRepeatTerm)return this.stack[e+1];t=this.stack[e]}}startOf(t,e){let i=this.state,r=this.stack.length,{parser:s}=this.cx;for(;;){let n=s.stateSlot(i,5),O=n>>19,a=65535&n;if(t.indexOf(a)>-1){let t=r-3*(n>>19),i=this.stack[t+1];if(null==e||e>i)return i}if(0==r)return null;0==O?(r-=3,i=this.stack[r]):(r-=3*(O-1),i=s.getGoto(this.stack[r-3],a,!0))}}recoverByInsert(t){if(this.stack.length>=300)return[];let e=this.cx.parser.nextStates(this.state);if(e.length>4||this.stack.length>=120){let i=e.filter((e=>e!=this.state&&this.cx.parser.hasAction(e,t)));if(this.stack.length<120)for(let t=0;i.length<4&&t<e.length;t++)i.indexOf(e[t])<0&&i.push(e[t]);e=i}let i=[];for(let t=0;t<e.length&&i.length<4;t++){if(e[t]==this.state)continue;let r=this.split();r.storeNode(0,r.pos,r.pos,4,!0),r.pushState(e[t],this.pos),r.score-=200,i.push(r)}return i}forceReduce(){let t=this.cx.parser.stateSlot(this.state,5);return 0!=(65536&t)&&(this.cx.parser.validAction(this.state,t)||(this.storeNode(0,this.reducePos,this.reducePos,4,!0),this.score-=100),this.reduce(t),!0)}forceAll(){for(;!this.cx.parser.stateFlag(this.state,2)&&this.forceReduce(););return this}get deadEnd(){if(3!=this.stack.length)return!1;let{parser:t}=this.cx;return 65535==t.data[t.stateSlot(this.state,1)]&&!t.stateSlot(this.state,4)}restart(){this.state=this.stack[0],this.stack.length=0}sameState(t){if(this.state!=t.state||this.stack.length!=t.stack.length)return!1;for(let e=0;e<this.stack.length;e+=3)if(this.stack[e]!=t.stack[e])return!1;return!0}get parser(){return this.cx.parser}dialectEnabled(t){return this.cx.parser.dialect.flags[t]}}var Y;!function(t){t[t.Token=200]="Token",t[t.Reduce=100]="Reduce",t[t.MaxNext=4]="MaxNext",t[t.MaxInsertStackDepth=300]="MaxInsertStackDepth",t[t.DampenInsertStackDepth=120]="DampenInsertStackDepth"}(Y||(Y={}));class z{constructor(t){this.stack=t,this.top=t.state,this.rest=t.stack,this.offset=this.rest.length}reduce(t){let e=65535&t,i=t>>19;0==i?(this.rest==this.stack.stack&&(this.rest=this.rest.slice()),this.rest.push(this.top,0,0),this.offset+=3):this.offset-=3*(i-1);let r=this.stack.cx.parser.getGoto(this.rest[this.offset-3],e,!0);this.top=r}}class C{constructor(t,e,i){this.stack=t,this.pos=e,this.index=i,this.buffer=t.buffer,0==this.index&&this.maybeNext()}static create(t){return new C(t,t.bufferBase+t.buffer.length,t.buffer.length)}maybeNext(){let t=this.stack.parent;null!=t&&(this.index=this.stack.bufferBase-t.bufferBase,this.stack=t,this.buffer=t.buffer)}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}next(){this.index-=4,this.pos-=4,0==this.index&&this.maybeNext()}fork(){return new C(this.stack,this.pos,this.index)}}class N{constructor(){this.start=-1,this.value=-1,this.end=-1}accept(t,e){this.value=t,this.end=e}}class F{constructor(t,e){this.data=t,this.id=e}token(t,e,i){!function(t,e,i,r,s){let n=0,O=1<<s,a=r.cx.parser.dialect;t:for(let s=i.start;0!=(O&t[n]);){let o=t[n+1];for(let e=n+3;e<o;e+=2)if((t[e+1]&O)>0){let n=t[e];if(a.allows(n)&&(-1==i.value||i.value==n||r.cx.parser.overrides(n,i.value))){i.accept(n,s);break}}let l=e.get(s++);for(let e=0,i=t[n+2];e<i;){let r=e+i>>1,s=o+r+(r<<1),O=t[s],a=t[s+1];if(l<O)i=r;else{if(!(l>=a)){n=t[s+2];continue t}e=r+1}}break}}(this.data,t,e,i,this.id)}}F.prototype.contextual=F.prototype.fallback=F.prototype.extend=!1;class Z{constructor(t,e={}){this.token=t,this.contextual=!!e.contextual,this.fallback=!!e.fallback,this.extend=!!e.extend}}function A(t,e=Uint16Array){if("string"!=typeof t)return t;let i=null;for(let r=0,s=0;r<t.length;){let n=0;for(;;){let e=t.charCodeAt(r++),i=!1;if(126==e){n=65535;break}e>=92&&e--,e>=34&&e--;let s=e-32;if(s>=46&&(s-=46,i=!0),n+=s,i)break;n*=46}i?i[s++]=n:i=new e(n)}return i}const B="undefined"!=typeof process&&/\bparse\b/.test(process.env.LOG);let D=null;function I(t,e,i){let r=t.cursor(e);for(;;)if(!(i<0?r.childBefore(e):r.childAfter(e)))for(;;){if((i<0?r.to<=e:r.from>=e)&&!r.type.isError)return i<0?r.to-1:r.from+1;if(i<0?r.prevSibling():r.nextSibling())break;if(!r.parent())return i<0?0:t.length}}class M{constructor(t){this.fragments=t,this.i=0,this.fragment=null,this.safeFrom=-1,this.safeTo=-1,this.trees=[],this.start=[],this.index=[],this.nextFragment()}nextFragment(){let t=this.fragment=this.i==this.fragments.length?null:this.fragments[this.i++];if(t){for(this.safeFrom=t.openStart?I(t.tree,t.from+t.offset,1)-t.offset:t.from,this.safeTo=t.openEnd?I(t.tree,t.to+t.offset,-1)-t.offset:t.to;this.trees.length;)this.trees.pop(),this.start.pop(),this.index.pop();this.trees.push(t.tree),this.start.push(-t.offset),this.index.push(0),this.nextStart=this.safeFrom}else this.nextStart=1e9}nodeAt(t){if(t<this.nextStart)return null;for(;this.fragment&&this.safeTo<=t;)this.nextFragment();if(!this.fragment)return null;for(;;){let e=this.trees.length-1;if(e<0)return this.nextFragment(),null;let i=this.trees[e],r=this.index[e];if(r==i.children.length){this.trees.pop(),this.start.pop(),this.index.pop();continue}let s=i.children[r],n=this.start[e]+i.positions[r];if(n>t)return this.nextStart=n,null;if(n==t&&n+s.length<=this.safeTo)return n==t&&n>=this.safeFrom?s:null;s instanceof X?(this.index[e]++,this.nextStart=n+s.length):(this.index[e]++,n+s.length>=t&&(this.trees.push(s),this.start.push(n),this.index.push(0)))}}}class H extends N{constructor(){super(...arguments),this.extended=-1,this.mask=0}clear(t){this.start=t,this.value=this.extended=-1}}const J=new N;class K{constructor(t){this.tokens=[],this.mainToken=J,this.actions=[],this.tokens=t.tokenizers.map((t=>new H))}getActions(t,e){let i=0,r=null,{parser:s}=t.cx,{tokenizers:n}=s,O=s.stateSlot(t.state,3);for(let s=0;s<n.length;s++){if(0==(1<<s&O))continue;let a=n[s],o=this.tokens[s];if((!r||a.fallback)&&((a.contextual||o.start!=t.pos||o.mask!=O)&&(this.updateCachedToken(o,a,t,e),o.mask=O),0!=o.value)){let e=i;if(o.extended>-1&&(i=this.addActions(t,o.extended,o.end,i)),i=this.addActions(t,o.value,o.end,i),!a.extend&&(r=o,i>e))break}}for(;this.actions.length>i;)this.actions.pop();return r||(r=J,r.start=t.pos,t.pos==e.length?r.accept(t.cx.parser.eofTerm,t.pos):r.accept(0,t.pos+1)),this.mainToken=r,this.actions}updateCachedToken(t,e,i,r){if(t.clear(i.pos),e.token(r,t,i),t.value>-1){let{parser:e}=i.cx;for(let s=0;s<e.specialized.length;s++)if(e.specialized[s]==t.value){let n=e.specializers[s](r.read(t.start,t.end),i);if(n>=0&&i.cx.parser.dialect.allows(n>>1)){0==(1&n)?t.value=n>>1:t.extended=n>>1;break}}}else i.pos==r.length?t.accept(i.cx.parser.eofTerm,i.pos):t.accept(0,i.pos+1)}putAction(t,e,i,r){for(let e=0;e<r;e+=3)if(this.actions[e]==t)return r;return this.actions[r++]=t,this.actions[r++]=e,this.actions[r++]=i,r}addActions(t,e,i,r){let{state:s}=t,{parser:n}=t.cx,{data:O}=n;for(let t=0;t<2;t++)for(let a=n.stateSlot(s,t?2:1);;a+=3){if(65535==O[a]){if(1!=O[a+1]){0==r&&2==O[a+1]&&(r=this.putAction(nt(O,a+1),e,i,r));break}a=nt(O,a+2)}O[a]==e&&(r=this.putAction(nt(O,a+1),e,i,r))}return r}}var tt;!function(t){t[t.Distance=5]="Distance",t[t.MaxRemainingPerStep=3]="MaxRemainingPerStep",t[t.MinBufferLengthPrune=200]="MinBufferLengthPrune",t[t.ForceReduceLimit=10]="ForceReduceLimit"}(tt||(tt={}));class et{constructor(t,e,i,r){this.parser=t,this.input=e,this.startPos=i,this.context=r,this.pos=0,this.recovering=0,this.nextStackID=9812,this.nested=null,this.nestEnd=0,this.nestWrap=null,this.reused=[],this.tokens=new K(t),this.topTerm=t.top[1],this.stacks=[W.start(this,t.top[0],this.startPos)];let s=null==r?void 0:r.fragments;this.fragments=s&&s.length?new M(s):null}advance(){if(this.nested){let t=this.nested.advance();return this.pos=this.nested.pos,t&&(this.finishNested(this.stacks[0],t),this.nested=null),null}let t,e,i,r=this.stacks,s=this.pos,n=this.stacks=[];for(let O=0;O<r.length;O++){let a,o=r[O];for(;;){if(o.pos>s)n.push(o);else if(a=this.checkNest(o))(!i||i.stack.score<o.score)&&(i=a);else{if(this.advanceStack(o,n,r))continue;{t||(t=[],e=[]),t.push(o);let i=this.tokens.mainToken;e.push(i.value,i.end)}}break}}if(i)return this.startNested(i),null;if(!n.length){let e=t&&function(t){let e=null;for(let i of t)i.pos==i.cx.input.length&&i.cx.parser.stateFlag(i.state,2)&&(!e||e.score<i.score)&&(e=i);return e}(t);if(e)return this.stackToTree(e);if(this.parser.strict)throw B&&t&&console.log("Stuck with token "+this.parser.getName(this.tokens.mainToken.value)),new SyntaxError("No parse at "+s);this.recovering||(this.recovering=5)}if(this.recovering&&t){let i=this.runRecovery(t,e,n);if(i)return this.stackToTree(i.forceAll())}if(this.recovering){let t=1==this.recovering?1:3*this.recovering;if(n.length>t)for(n.sort(((t,e)=>e.score-t.score));n.length>t;)n.pop();n.some((t=>t.reducePos>s))&&this.recovering--}else if(n.length>1)t:for(let t=0;t<n.length-1;t++){let e=n[t];for(let i=t+1;i<n.length;i++){let r=n[i];if(e.sameState(r)||e.buffer.length>200&&r.buffer.length>200){if(!((e.score-r.score||e.buffer.length-r.buffer.length)>0)){n.splice(t--,1);continue t}n.splice(i--,1)}}}this.pos=n[0].pos;for(let t=1;t<n.length;t++)n[t].pos<this.pos&&(this.pos=n[t].pos);return null}advanceStack(t,e,i){let r=t.pos,{input:s,parser:n}=this,O=B?this.stackID(t)+" -> ":"";if(this.fragments)for(let e=this.fragments.nodeAt(r);e;){let i=this.parser.nodeSet.types[e.type.id]==e.type?n.getGoto(t.state,e.type.id):-1;if(i>-1&&e.length)return t.useNode(e,i),B&&console.log(O+this.stackID(t)+` (via reuse of ${n.getName(e.type.id)})`),!0;if(!(e instanceof L)||0==e.children.length||e.positions[0]>0)break;let r=e.children[0];if(!(r instanceof L))break;e=r}let a=n.stateSlot(t.state,4);if(a>0)return t.reduce(a),B&&console.log(O+this.stackID(t)+` (via always-reduce ${n.getName(65535&a)})`),!0;let o=this.tokens.getActions(t,s);for(let s=0;s<o.length;){let a=o[s++],l=o[s++],h=o[s++],f=s==o.length||!i,c=f?t:t.split();if(c.apply(a,l,h),B&&console.log(O+this.stackID(c)+` (via ${0==(65536&a)?"shift":`reduce of ${n.getName(65535&a)}`} for ${n.getName(l)} @ ${r}${c==t?"":", split"})`),f)return!0;c.pos>r?e.push(c):i.push(c)}return!1}advanceFully(t,e){let i=t.pos;for(;;){let r=this.checkNest(t);if(r)return r;if(!this.advanceStack(t,null,null))return!1;if(t.pos>i)return it(t,e),!0}}runRecovery(t,e,i){let r,s=null,n=!1;for(let O=0;O<t.length;O++){let a=t[O],o=e[O<<1],l=e[1+(O<<1)],h=B?this.stackID(a)+" -> ":"";if(a.deadEnd){if(n)continue;n=!0,a.restart(),B&&console.log(h+this.stackID(a)+" (restarted)");let t=this.advanceFully(a,i);if(t){!0!==t&&(r=t);continue}}let f=a.split(),c=h;for(let t=0;f.forceReduce()&&t<10;t++){B&&console.log(c+this.stackID(f)+" (via force-reduce)");let t=this.advanceFully(f,i);if(t){!0!==t&&(r=t);break}B&&(c=this.stackID(f)+" -> ")}for(let t of a.recoverByInsert(o))B&&console.log(h+this.stackID(t)+" (via recover-insert)"),this.advanceFully(t,i);this.input.length>a.pos?(l==a.pos&&(l++,o=0),a.recoverByDelete(o,l),B&&console.log(h+this.stackID(a)+` (via recover-delete ${this.parser.getName(o)})`),it(a,i)):(!s||s.score<a.score)&&(s=a)}if(s)return s;if(r)for(let t of this.stacks)if(t.score>r.stack.score){r=void 0;break}return r&&this.startNested(r),null}forceFinish(){let t=this.stacks[0].split();return this.nested&&this.finishNested(t,this.nested.forceFinish()),this.stackToTree(t.forceAll())}stackToTree(t,e=t.pos){return L.build({buffer:C.create(t),nodeSet:this.parser.nodeSet,topID:this.topTerm,maxBufferLength:this.parser.bufferLength,reused:this.reused,start:this.startPos,length:e-this.startPos,minRepeatType:this.parser.minRepeatTerm})}checkNest(t){let e=this.parser.findNested(t.state);if(!e)return null;let i=e.value;return"function"==typeof i&&(i=i(this.input,t)),i?{stack:t,info:e,spec:i}:null}startNested(t){let{stack:e,info:i,spec:r}=t;this.stacks=[e],this.nestEnd=this.scanForNestEnd(e,i.end,r.filterEnd),this.nestWrap="number"==typeof r.wrapType?this.parser.nodeSet.types[r.wrapType]:r.wrapType||null,r.startParse?this.nested=r.startParse(this.input.clip(this.nestEnd),e.pos,this.context):this.finishNested(e)}scanForNestEnd(t,e,i){for(let r=t.pos;r<this.input.length;r++)if(J.start=r,J.value=-1,e.token(this.input,J,t),J.value>-1&&(!i||i(this.input.read(r,J.end))))return r;return this.input.length}finishNested(t,e){this.nestWrap?e=new L(this.nestWrap,e?[e]:[],e?[0]:[],this.nestEnd-t.pos):e||(e=new L(y.none,[],[],this.nestEnd-t.pos));let i=this.parser.findNested(t.state);t.useNode(e,this.parser.getGoto(t.state,i.placeholder,!0)),B&&console.log(this.stackID(t)+" (via unnest)")}stackID(t){let e=(D||(D=new WeakMap)).get(t);return e||D.set(t,e=String.fromCodePoint(this.nextStackID++)),e+t}}function it(t,e){for(let i=0;i<e.length;i++){let r=e[i];if(r.pos==t.pos&&r.sameState(t))return void(e[i].score<t.score&&(e[i]=t))}e.push(t)}class rt{constructor(t,e,i){this.source=t,this.flags=e,this.disabled=i}allows(t){return!this.disabled||0==this.disabled[t]}}class st{constructor(t){if(this.bufferLength=g,this.strict=!1,this.nextStateCache=[],this.cachedDialect=null,13!=t.version)throw new RangeError(`Parser version (${t.version}) doesn't match runtime version (13)`);let e=A(t.tokenData),i=t.nodeNames.split(" ");this.minRepeatTerm=i.length;for(let e=0;e<t.repeatNodeCount;e++)i.push("");let r=[];for(let t=0;t<i.length;t++)r.push([]);function s(t,e,i){r[t].push([e,e.deserialize(String(i))])}if(t.nodeProps)for(let e of t.nodeProps){let t=e[0];for(let i=1;i<e.length;){let r=e[i++];if(r>=0)s(r,t,e[i++]);else{let n=e[i+-r];for(let O=-r;O>0;O--)s(e[i++],t,n);i++}}}if(this.specialized=new Uint16Array(t.specialized?t.specialized.length:0),this.specializers=[],t.specialized)for(let e=0;e<t.specialized.length;e++)this.specialized[e]=t.specialized[e].term,this.specializers[e]=t.specialized[e].get;this.states=A(t.states,Uint32Array),this.data=A(t.stateData),this.goto=A(t.goto);let n=Object.keys(t.topRules).map((e=>t.topRules[e][1]));this.nodeSet=new P(i.map(((e,i)=>y.define({name:i>=this.minRepeatTerm?void 0:e,id:i,props:r[i],top:n.indexOf(i)>-1,error:0==i,skipped:t.skippedNodes&&t.skippedNodes.indexOf(i)>-1})))),this.maxTerm=t.maxTerm,this.tokenizers=t.tokenizers.map((t=>"number"==typeof t?new F(e,t):t)),this.topRules=t.topRules,this.nested=(t.nested||[]).map((([t,e,i,r])=>({name:t,value:e,end:new F(A(i),0),placeholder:r}))),this.dialects=t.dialects||{},this.dynamicPrecedences=t.dynamicPrecedences||null,this.tokenPrecTable=t.tokenPrec,this.termNames=t.termNames||null,this.maxNode=this.nodeSet.types.length-1;for(let t=0,e=this.states.length/6;t<e;t++)this.nextStateCache[t]=null;this.dialect=this.parseDialect(),this.top=this.topRules[Object.keys(this.topRules)[0]]}parse(t,e=0,i={}){"string"==typeof t&&(t=G(t));let r=new et(this,t,e,i);for(;;){let t=r.advance();if(t)return t}}startParse(t,e=0,i={}){return"string"==typeof t&&(t=G(t)),new et(this,t,e,i)}getGoto(t,e,i=!1){let r=this.goto;if(e>=r[0])return-1;for(let s=r[e+1];;){let e=r[s++],n=1&e,O=r[s++];if(n&&i)return O;for(let i=s+(e>>1);s<i;s++)if(r[s]==t)return O;if(n)return-1}}hasAction(t,e){let i=this.data;for(let r=0;r<2;r++)for(let s,n=this.stateSlot(t,r?2:1);;n+=3){if(65535==(s=i[n])){if(1!=i[n+1]){if(2==i[n+1])return nt(i,n+2);break}s=i[n=nt(i,n+2)]}if(s==e||0==s)return nt(i,n+1)}return 0}stateSlot(t,e){return this.states[6*t+e]}stateFlag(t,e){return(this.stateSlot(t,0)&e)>0}findNested(t){let e=this.stateSlot(t,0);return 4&e?this.nested[e>>10]:null}validAction(t,e){if(e==this.stateSlot(t,4))return!0;for(let i=this.stateSlot(t,1);;i+=3){if(65535==this.data[i]){if(1!=this.data[i+1])return!1;i=nt(this.data,i+2)}if(e==nt(this.data,i+1))return!0}}nextStates(t){let e=this.nextStateCache[t];if(e)return e;let i=[];for(let e=this.stateSlot(t,1);;e+=3){if(65535==this.data[e]){if(1!=this.data[e+1])break;e=nt(this.data,e+2)}0==(1&this.data[e+2])&&i.indexOf(this.data[e+1])<0&&i.push(this.data[e+1])}let r=this.goto,s=r[0];for(let e=0;e<s;e++)for(let s=r[e+1];;){let e=r[s++],n=r[s++];for(let O=s+(e>>1);s<O;s++)r[s]==t&&i.indexOf(n)<0&&i.push(n);if(1&e)break}return this.nextStateCache[t]=i}overrides(t,e){let i=Ot(this.data,this.tokenPrecTable,e);return i<0||Ot(this.data,this.tokenPrecTable,t)<i}configure(t){let e=Object.assign(Object.create(st.prototype),this);if(t.props&&(e.nodeSet=this.nodeSet.extend(...t.props)),t.top){let i=this.topRules[t.top];if(!i)throw new RangeError(`Invalid top rule name ${t.top}`);e.top=i}return t.tokenizers&&(e.tokenizers=this.tokenizers.map((e=>{let i=t.tokenizers.find((t=>t.from==e));return i?i.to:e}))),t.dialect&&(e.dialect=this.parseDialect(t.dialect)),t.nested&&(e.nested=this.nested.map((e=>Object.prototype.hasOwnProperty.call(t.nested,e.name)?{name:e.name,value:t.nested[e.name],end:e.end,placeholder:e.placeholder}:e))),null!=t.strict&&(e.strict=t.strict),null!=t.bufferLength&&(e.bufferLength=t.bufferLength),e}getName(t){return this.termNames?this.termNames[t]:String(t<=this.maxNode&&this.nodeSet.types[t].name||t)}get eofTerm(){return this.maxNode+1}get hasNested(){return this.nested.length>0}dynamicPrecedence(t){let e=this.dynamicPrecedences;return null==e?0:e[t]||0}parseDialect(t){if(this.cachedDialect&&this.cachedDialect.source==t)return this.cachedDialect;let e=Object.keys(this.dialects),i=e.map((()=>!1));if(t)for(let r of t.split(" ")){let t=e.indexOf(r);t>=0&&(i[t]=!0)}let r=null;for(let t=0;t<e.length;t++)if(!i[t])for(let i,s=this.dialects[e[t]];65535!=(i=this.data[s++]);)(r||(r=new Uint8Array(this.maxTerm+1)))[i]=1;return this.cachedDialect=new rt(t,i,r)}static deserialize(t){return new st(t)}}function nt(t,e){return t[e]|t[e+1]<<16}function Ot(t,e,i){for(let r,s=e;65535!=(r=t[s]);s++)if(r==i)return s-e;return-1}const at=[21,48,49,53,56,57,60,61,62],ot=[231],lt=new WeakMap;class ht{constructor(){this.last=this.lastIndent=-1,this.prev=[]}get(t){if(this.last==t)return this.lastIndent;for(let e=0;e<this.prev.length;e++)if(this.prev[e]==t)return e;return-1}set(t,e){t!=this.last&&(this.last>-1&&this.setPrev(this.last,this.lastIndent),this.last=t,this.lastIndent=e)}setPrev(t,e){for(;this.prev.length<e;)this.prev.push(-1);this.prev[e]=t}static for(t){let e=lt.get(t);return e||lt.set(t,e=new ht),e}}function ft(t,e){let i=ht.for(t),r=i.get(e);if(r>-1)return r;let s=t.read(Math.max(0,e-50),e),n=0,O=s.length;for(;O>0;O--){let t=s.charCodeAt(O-1);if(10==t||13==t)break}for(let t=O;t<s.length;t++){let e=s.charCodeAt(t);if(32==e)n++;else{if(9!=e)break;n+=8-n%8}}return i.setPrev(e,n),n}const ct=new Z(((t,e,i)=>{let r=t.get(e.start);if(r<0)return void e.accept(167,e.start);if(10!=r&&13!=r)return;if(null!=i.startOf(at))return void e.accept(165,e.start+1);let s=e.start+1,n=0;for(;s<t.length;s++){let i=t.get(s);if(32==i)n++;else{if(9!=i){if(10==i||13==n||35==i)return void e.accept(166,e.start+1);break}n+=8-n%8}}e.accept(164,e.start+1),ht.for(t).set(s,n)}),{contextual:!0,fallback:!0}),ut=new Z(((t,e,i)=>{let r=i.startOf(ot),s=null==r?0:ft(t,r),n=ft(t,e.start);e.accept(n<=s?169:168,e.start)}),{contextual:!0,fallback:!0}),pt=new Z(((t,e)=>{let i=e.start;for(let e="print",r=0;r<e.length;r++,i++)if(t.get(i)!=e.charCodeAt(r))return;let r=i;if(!/\w/.test(String.fromCharCode(t.get(i))))for(;;i++){let s=t.get(i);if(32!=s&&9!=s)return void(40!=s&&46!=s&&10!=s&&13!=s&&35!=s&&e.accept(1,r))}})),Qt={__proto__:null,await:40,or:48,and:50,in:54,not:56,is:58,if:64,else:66,lambda:70,self:74,yield:90,from:92,async:100,for:102,None:154,True:156,False:156,del:170,pass:174,break:178,continue:182,return:186,raise:194,import:198,as:200,global:204,nonlocal:206,assert:210,elif:220,while:224,try:230,except:232,finally:234,with:238,def:242,class:252},dt=st.deserialize({version:13,states:"!;[O`Q!LTOOO%fQ!LUO'#GcOOQ!LQ'#Cm'#CmOOQ!LQ'#Cn'#CnO'UQ!LSO'#ClO(zQ!LUO'#GbOOQ!LQ'#Gc'#GcOOQ!LQ'#DS'#DSOOQ!LQ'#Gb'#GbO)hQ!LSO'#CqO)xQ!LSO'#DcO*YQ!LSO'#DgOOQ!LQ'#Dt'#DtO*mOWO'#DtO*uO`O'#DtO*}OpO'#DuO+YO!bO'#DuO+eO#tO'#DuO+pO&jO'#DuO-rQ!LUO'#GSOOQ!LQ'#GS'#GSO'UQ!LSO'#GRO/UQ!LUO'#GROOQ!LQ'#E^'#E^O/mQ!LSO'#E_OOQ!LQ'#GQ'#GQO/wQ!LSO'#GPOOQ&FV'#GP'#GPO0SQ!LSO'#FQOOQ!LQ'#Ft'#FtO0XQ!LSO'#FPOOQ&FV'#H]'#H]OOQ&FV'#GO'#GOOOQ!LR'#FS'#FSQ`Q!LTOOO'UQ!LSO'#CoO0gQ!LSO'#CzO0nQ!LSO'#DOO1PQ!LSO'#GgO1aQ!LUO'#ERO'UQ!LSO'#ESOOQ!LQ'#EU'#EUOOQ!LQ'#EW'#EWOOQ!LQ'#EY'#EYO1uQ!LSO'#E[O2SQ!LSO'#E`O0SQ!LSO'#EbO2gQ!LUO'#EbO0SQ!LSO'#EeO/mQ!LSO'#EhO/mQ!LSO'#ElO/mQ!LSO'#EoO2rQ!LSO'#EqO2yQ!LSO'#EvO3UQ!LSO'#ErO/mQ!LSO'#EvO0SQ!LSO'#ExO0SQ!LSO'#E}OOQ!LQ'#Cc'#CcOOQ!LQ'#Cd'#CdOOQ!LQ'#Ce'#CeOOQ!LQ'#Cf'#CfOOQ!LQ'#Cg'#CgOOQ!LQ'#Ch'#ChOOQ!LQ'#Cj'#CjO'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O'UQ!LSO,58|O3ZQ!LSO'#DnOOQ!LQ,5:X,5:XO3nQ!LSO,5:[O3{Q#)WO,5:[O4QQ!LUO,59WO0gQ!LSO,59_O0gQ!LSO,59_O0gQ!LSO,59_O6pQ!LSO,59_O6uQ!LSO,59_O6|Q!LSO,59gO7TQ!LSO'#GbO8ZQ!LSO'#GaOOQ!LQ'#Ga'#GaOOQ!LQ'#DY'#DYO8rQ!LSO,59]O'UQ!LSO,59]O9QQ!LSO,59]O9VQ!LSO,5:QO'UQ!LSO,5:QOOQ!LQ,59},59}O9eQ!LSO,59}O9jQ!LSO,5:WO'UQ!LSO,5:WO'UQ!LSO,5:UOOQ!LQ,5:R,5:RO9{Q!LSO,5:RO:QQ!LSO,5:VOOOO'#F]'#F]O:VOWO,5:`OOQ!LQ,5:`,5:`OOOO'#F^'#F^O:_O`O,5:`O:gQ!LSO'#DvOOOO'#F_'#F_O:wOpO,5:aOOQ!LQ,5:a,5:aOOOO'#Fb'#FbO;SO!bO,5:aOOOO'#Fc'#FcO;_O#tO,5:aOOOO'#Fd'#FdO;jO&jO,5:aOOQ!LQ'#Fe'#FeO;uQ!LUO,5:eO>gQ!LUO,5<mO?QQ#4^O'#FfO?tQ!LUO,5<mOOQ!LQ,5:y,5:yO@]Q!LTO'#FmOAlQ!LSO,5;UOOQ&FV,5<k,5<kOAwQ!LUO'#HYOB`Q!LSO,5;lOOQ!LQ-E9r-E9rOOQ&FV,5;k,5;kO3PQ!LSO'#ExOOQ!LR-E9Q-E9QOBhQ!LUO,59ZODoQ!LUO,59fOEYQ!LSO'#GdOEeQ!LSO'#GdO0SQ!LSO'#GdOEpQ!LSO'#DQOExQ!LSO,59jOE}Q!LSO'#GhO'UQ!LSO'#GhO/mQ!LSO,5=ROOQ!LQ,5=R,5=RO/mQ!LSO'#D}OOQ!LQ'#EO'#EOOFlQ!LSO'#FgOF|Q!LSO,58zOG[Q!LSO,58zO)kQ!LSO,5:kOGaQ!LUO'#GjOOQ!LQ,5:n,5:nOOQ!LQ,5:v,5:vOGtQ!LSO,5:zOHVQ!LSO,5:|OOQ!LQ'#Fj'#FjOHeQ!LUO,5:|OHsQ!LSO,5:|OHxQ!LSO'#H[OOQ!LQ,5;P,5;POIWQ!LSO'#HXOOQ!LQ,5;S,5;SO3UQ!LSO,5;WO3UQ!LSO,5;ZOIiQ!LUO'#H^O'UQ!LSO'#H^OIsQ!LSO,5;]O2rQ!LSO,5;]O/mQ!LSO,5;bO0SQ!LSO,5;dOIxQ!LTO'#EmOKRQ&FXO,5;^ONjQ!LSO'#H_O3UQ!LSO,5;bONuQ!LSO,5;dONzQ!LSO,5;iO!#oQ!LUO1G.hO!#vQ!LUO1G.hO!&gQ!LUO1G.hO!&qQ!LUO1G.hO!)[Q!LUO1G.hO!)oQ!LUO1G.hO!*SQ!LUO1G.hO!,rQ!LSO'#GpO!-QQ!LUO'#GSO/mQ!LSO'#GpO!-[Q!LSO'#GoOOQ!LQ,5:Y,5:YO!-dQ!LSO,5:YO!-iQ!LSO'#GqO!-tQ!LSO'#GqO!.XQ!LSO1G/vOOQ!LQ'#Dr'#DrOOQ!LQ1G/v1G/vOOQ!LQ1G.y1G.yO!/XQ!LUO1G.yO!/`Q!LUO1G.yO0gQ!LSO1G.yO!/{Q!LSO1G/ROOQ!LQ'#DX'#DXO/mQ!LSO,59rOOQ!LQ1G.w1G.wO!0SQ!LSO1G/dO!0dQ!LSO1G/dO!0lQ!LSO1G/eO'UQ!LSO'#GiO!0qQ!LSO'#GiO!0vQ!LUO1G.wO!1WQ!LSO,59fO!2^Q!LSO'#FXO!2qQ!LSO,5=XO!2yQ!LSO1G/lO!3OQ!LUO1G/lOOQ!LQ1G/i1G/iO!3`Q!LSO'#FUO!4YQ!LSO,5=SO/mQ!LSO1G/pO!4wQ!LSO1G/rO!4|Q!LUO1G/rO!5^Q!LUO1G/pOOQ!LQ1G/m1G/mOOQ!LQ1G/q1G/qOOOO-E9Z-E9ZOOQ!LQ1G/z1G/zOOOO-E9[-E9[O!5nQ!LSO'#G|O/mQ!LSO'#G|O!5|Q!LSO,5:bOOOO-E9]-E9]OOQ!LQ1G/{1G/{OOOO-E9`-E9`OOOO-E9a-E9aOOOO-E9b-E9bOOQ!LQ-E9c-E9cO!6XQ!LUO1G2XO'UQ!LSO,5<QOOQ!LQ,5<Q,5<QOOQ!LQ-E9d-E9dOOQ!LQ,5<X,5<XOOQ!LQ-E9k-E9kOOQ&FV1G0p1G0pO0SQ!LSO'#FiO!6pQ!LUO,5=tOOQ!LQ1G1W1G1WO!7XQ!LSO1G1WOOQ!LQ'#DT'#DTO/mQ!LSO,5=OOOQ!LQ,5=O,5=OO!7^Q!LSO'#FTO!7lQ!LSO,59lO!7tQ!LSO1G/UO!8OQ!LUO,5=SOOQ!LQ1G2m1G2mOOQ!LQ,5:i,5:iO!8oQ!LSO'#GROOQ!LQ,5<R,5<ROOQ!LQ-E9e-E9eO!9QQ!LSO1G.fOOQ!LQ1G0V1G0VO!9`Q!LSO'#FWO!9sQ!LSO,5=UO/mQ!LSO1G0fO/mQ!LSO1G0fO0SQ!LSO1G0hOOQ!LQ-E9h-E9hO!:UQ!LSO1G0hO!:aQ!LSO1G0hO!:fQ!LSO'#FlO!:wQ!LSO,5=vO!;VQ!LSO'#FhO!;pQ!LSO,5=sO!<RQ&FXO1G0rO!?gQ&FXO1G0uO!BxQ!LSO'#FpO!CVQ!LSO,5=xO!C_Q!LUO,5=xO/mQ!LSO1G0wO!CiQ!LSO1G0wO3UQ!LSO1G0|ONuQ!LSO1G1OOOQ&FV,5;X,5;XO!CnQ!LTO,5;XO!EaQ&FXO1G0xO!HxQ!LSO'#FqO3UQ!LSO1G0xO3UQ!LSO1G0xO!IVQ!LSO'#FrO!IgQ!LSO,5=yO0SQ!LSO,5=yOOQ&FV1G0|1G0|O!JQQ!LSO'#EzO!JXQ#)WO1G1OOOQ&FV1G1T1G1TO3UQ!LSO1G1TOOQ!LQ,5=[,5=[OOQ!LQ'#Do'#DoO/mQ!LSO,5=[O!JaQ!LSO'#FZO!JwQ!LSO,5=ZOOQ!LQ1G/t1G/tO!KPQ!LSO'#F[O!KdQ!LSO,5=]O!KlQ!LSO,5=]O!LPQ!LSO,5=]O!LaQ!LSO,5=]OOQ!LQ7+%b7+%bOOQ!LQ7+$e7+$eO!7tQ!LSO7+$mO!NSQ!LSO1G.yO!NZQ!LSO1G.yOOQ!LQ1G/^1G/^OOQ!LQ,5;q,5;qO'UQ!LSO,5;qOOQ!LQ7+%O7+%OO!NbQ!LSO7+%OOOQ!LQ-E9T-E9TOOQ!LQ7+%P7+%PO!NrQ!LSO,5=TO'UQ!LSO,5=TOOQ!LQ7+$c7+$cO!NwQ!LSO7+%OO# PQ!LSO7+%POOQ!LQ,5;s,5;sO'UQ!LSO,5;sOOQ!LQ-E9V-E9VOOQ!LQ7+%W7+%WO# UQ!LSO1G2sO# ^Q!LSO7+%WOOQ!LQ,5;p,5;pO'UQ!LSO,5;pOOQ!LQ-E9S-E9SO# cQ!LSO7+%[OOQ!LQ7+%^7+%^O# qQ!LSO1G2nO#!`Q!LSO7+%^O#!eQ!LSO'#FYO#!xQ!LSO1G2tO##QQ!LSO7+%[O##VQ!LSO'#F`O##pQ!LSO,5=hO##pQ!LSO,5=hO#$OOMhO'#DxO#$ZOQO'#G}OOOO1G/|1G/|O#$`Q!LSO1G/|O#$hQ!LUO1G1lOOQ!LQ,5<T,5<TOOQ!LQ-E9g-E9gOOQ!LQ7+&r7+&rOOQ!LQ1G2j1G2jOOQ!LQ,5;o,5;oOOQ!LQ-E9R-E9ROOQ!LQ7+$p7+$pO#%RQ!LSO'#FfO#%oQ!LSO,5<mO#&QQ!LUO,5;rOOQ!LQ-E9U-E9UOOQ!LQ7+&Q7+&QO#&eQ!LSO7+&QOOQ!LQ7+&S7+&SO#&sQ!LSO'#HZO0SQ!LSO7+&SO#'XQ!LSO7+&SOOQ!LQ,5<W,5<WOOQ!LQ-E9j-E9jOOQ!LQ,5<S,5<SOOQ!LQ-E9f-E9fO#'dQ&FXO7+&^O!HxQ!LSO'#FoO3UQ!LSO7+&^O3UQ!LSO7+&aO#*xQ!LUO,5<[O'UQ!LSO,5<[OOQ!LQ-E9n-E9nO#+SQ!LSO1G3dO3UQ!LSO7+&cO/mQ!LSO7+&cOOQ&FV7+&h7+&hO!JXQ#)WO7+&jO#+[Q&FWO1G0sOOQ&FV-E9o-E9oO3UQ!LSO7+&dO3UQ!LSO7+&dOOQ&FV,5<],5<]O#+gQ!LSO,5<]OOQ&FV7+&d7+&dO#+rQ&FXO7+&dO#/TQ!LSO,5<^OOQ!LQ-E9p-E9pO#/`Q!LSO1G3eO#/hQ!LSO'#HaO#/vQ!LSO'#HaO0SQ!LSO'#HaOOQ!LQ'#Ha'#HaO#0RQ!LSO'#H`OOQ!LQ,5;f,5;fO#0ZQ!LSO,5;fO/mQ!LSO'#E|OOQ&FV7+&j7+&jO3UQ!LSO7+&jOOQ&FV7+&o7+&oOOQ!LQ1G2v1G2vOOQ!LQ,5;u,5;uOOQ!LQ-E9X-E9XO#0`Q!LSO,5;vO#0kQ!LSO,5;vOOQ!LQ-E9Y-E9YO#1OQ!LSO1G2wO#1WQ!LSO1G2wO#1hQ!LSO1G2wO#1OQ!LSO1G2wOOQ!LQ<<HX<<HXO#1sQ!LUO1G1]OOQ!LQ<<Hj<<HjP#1}Q!LSO'#FVO6|Q!LSO1G2oO#2[Q!LSO1G2oO#2aQ!LSO<<HjOOQ!LQ<<Hk<<HkO#2qQ!LUO1G1_OOQ!LQ<<Hr<<HrO#2{Q!LUO1G1[O#3lQ!LSO7+(`O#3tQ!LSO<<HvOOQ!LQ<<Hx<<HxO#3yQ!LSO,5;tO'UQ!LSO,5;tOOQ!LQ-E9W-E9WOOQ!LQ<<Hv<<HvOOQ!LQ,5;z,5;zO/mQ!LSO,5;zOOQ!LQ-E9^-E9^O#4OQ!LSO1G3SOOOO'#Fa'#FaO#4^OMhO,5:dOOOO,5=i,5=iOOOO7+%h7+%hO#4iQ!LSO1G2XO/mQ!LSO<<IlO#4zQ!LSO'#FkO#5`Q!LSO,5=uO0SQ!LSO,5=uO#5qQ!LSO<<InOOQ!LQ<<In<<InO0SQ!LSO<<InOOQ&FV-E9m-E9mO3UQ!LSO<<IxOOQ&FV,5<Z,5<ZO3UQ!LSO,5<ZOOQ&FV<<Ix<<IxOOQ&FV<<I{<<I{O#5vQ!LUO1G1vO#6QQ&FXO<<I}O3UQ!LSO<<I}OOQ&FV<<JU<<JUO3UQ!LSO<<JUO!CnQ!LTO'#FnO#9cQ&FWO7+&_OOQ&FV7+&_7+&_OOQ&FV<<JO<<JOO#9nQ&FXO<<JOOOQ&FV1G1w1G1wO0SQ!LSO1G1wO3UQ!LSO<<JOO0SQ!LSO1G1xO#=PQ!LSO7+)POOQ!LQ'#E{'#E{O/mQ!LSO,5={O#=XQ!LSO,5={OOQ!LQ,5={,5={O#=dQ!LSO'#FsO#=nQ!LSO,5=zOOQ!LQ1G1Q1G1QOOQ!LQ,5;h,5;hO#=vQ!LSO1G1bO#>ZQ!LSO1G1bO#>kQ!LSO1G1bO#>vQ!LSO7+(cO#>vQ!LSO7+(cO#?OQ!LSO7+(cO#?`Q!LSO7+(ZO6|Q!LSO7+(ZOOQ!LQAN>UAN>UOOQ!LQAN>bAN>bO/mQ!LSO1G1`O#?yQ!LUO1G1`OOQ!LQ1G1f1G1fOOOO-E9_-E9_OOQ!LQAN?WAN?WO#@TQ!LSO,5<VOOQ!LQ-E9i-E9iO#@iQ!LSO1G3aOOQ!LQAN?YAN?YO#@zQ!LSOAN?YOOQ&FVAN?dAN?dOOQ&FV1G1u1G1uO3UQ!LSOAN?iO#APQ&FXOAN?iOOQ&FVAN?pAN?pOOQ&FU,5<Y,5<YOOQ&FU-E9l-E9lOOQ&FV<<Iy<<IyO3UQ!LSOAN?jO3UQ!LSO7+'cOOQ&FVAN?jAN?jOOQ!LQ7+'d7+'dOOQ!LQ1G3g1G3gO/mQ!LSO1G3gOOQ!LQ,5<_,5<_OOQ!LQ-E9q-E9qO#DbQ!LSO7+&|O#DrQ!LSO7+&|OOQ!LQ7+&|7+&|O#D}Q!LSO<<K}O#D}Q!LSO<<K}O#EVQ!LSO'#GkOOQ!LQ<<Ku<<KuO#EaQ!LSO<<KuOOQ!LQ7+&z7+&zO0SQ!LSO1G1qO#EzQ!LSO7+({OOQ!LQG24tG24tOOQ&FVG25TG25TO3UQ!LSOG25TOOQ&FVG25UG25UOOQ&FV<<J}<<J}OOQ!LQ7+)R7+)ROOQ!LQ<<Jh<<JhO#F]Q!LSO<<JhO#FmQ!LSOANAiO#FuQ!LSO'#GlOOQ!LQ'#Gl'#GlO0nQ!LSO'#DbO#G`Q!LSO,5=VOOQ!LQANAaANAaOOQ!LQ7+']7+']OOQ&FVLD*oLD*oOOQ!LQAN@SAN@SO#GwQ!LSO,59|OOQ!LQ1G2q1G2qO#EVQ!LSO1G/hOOQ!LQ7+%S7+%SO6|Q!LSO'#CzO6|Q!LSO,59_O6|Q!LSO,59_O6|Q!LSO,59_O#G|Q!LUO,5<mO6|Q!LSO1G.yO/mQ!LSO1G/UO/mQ!LSO7+$mO'UQ!LSO'#GRO#HaQ!LSO,59_O#HfQ!LSO,59_O#HmQ!LSO,59jO#HrQ!LSO1G/RO0nQ!LSO'#DOO6|Q!LSO,59g",stateData:"#IT~O$qOS$lOS$kOSQOS~OPhOTeOdsOfXOltOp!SOsuOudO}vO!O!PO!S!VO!T!UO!WYO![ZO!gdO!ndO!odO!pdO!wxO!yyO!{zO!}{O#P|O#T}O#V!OO#Y!QO#Z!QO#]!RO#d!TO#g!WO#k!XO#m!YO#r!ZO#ulO$jqO$|QO$}QO%RRO%SVO%g[O%h]O%k^O%n_O%t`O%waO%ybO~OT!aO]!aO_!bOf!jO!W!lO!e!mO$w![O$x!]O$y!^O$z!_O${!_O$|!`O$}!`O%O!aO%P!aO%Q!aO~Oh%VXi%VXj%VXk%VXl%VXm%VXp%VXx%VXy%VX!t%VX#_%VX$j%VX$m%VX%X%VX!P%VX!S%VX!T%VX%Y%VX!X%VX!]%VX!O%VX#W%VXq%VX!k%VX~P$bOdsOfXOudO!WYO![ZO!gdO!ndO!odO!pdO$|QO$}QO%RRO%SVO%g[O%h]O%k^O%n_O%t`O%waO%ybO~Ox%UXy%UX#_%UX$j%UX$m%UX%X%UX~Oh!pOi!qOj!oOk!oOl!rOm!sOp!tO!t%UX~P(fOT!zOl,qOs-OO}vO~P'UOT!}Ol,qOs-OO!X#OO~P'UOT#RO_#SOl,qOs-OO!]#TO~P'UO%i#WO%j#YO~O%l#ZO%m#YO~O![#]O%o#^O%s#`O~O![#]O%u#aO%v#`O~O![#]O%j#`O%x#cO~O![#]O%m#`O%z#eO~OT$vX]$vX_$vXf$vXh$vXi$vXj$vXk$vXl$vXm$vXp$vXx$vX!W$vX!e$vX$w$vX$x$vX$y$vX$z$vX${$vX$|$vX$}$vX%O$vX%P$vX%Q$vX!P$vX!S$vX!T$vX~O%g[O%h]O%k^O%n_O%t`O%waO%ybOy$vX!t$vX#_$vX$j$vX$m$vX%X$vX%Y$vX!X$vX!]$vX!O$vX#W$vXq$vX!k$vX~P+{Ox#jOy$uX!t$uX#_$uX$j$uX$m$uX%X$uX~Ol,qOs-OO~P'UO#_#mO$j#oO$m#oO~O%SVO~O!S#tO#m!YO#r!ZO#ulO~OltO~P'UOT#yO_#zOu#xO%SVOytP~OT$OOl,qOs-OO!O$PO~P'UOy$RO!t$WO%X$SO#_!uX$j!uX$m!uX~OT$OOl,qOs-OO~P'UOl,qOs-OO#_#SX$j#SX$m#SX~P'UO!e$^O!n$^O%SVO~OT$hO~P'UO!T$jO#k$kO#m$lO~Oy$mO~OT$|O_$|Ol,qOs-OO!P%OO~P'UOl,qOs-OOy%RO~P'UO%f%TO~O_!bOf!jO!W!lO!e!mOT`a]`ah`ai`aj`ak`al`am`ap`ax`ay`a!t`a#_`a$j`a$m`a$w`a$x`a$y`a$z`a${`a$|`a$}`a%O`a%P`a%Q`a%X`a!P`a!S`a!T`a%Y`a!X`a!]`a!O`a#W`aq`a!k`a~Ok%YO~Ol%YO~P'UOl,qO~P'UOh,sOi,tOj,rOk,rOl,zOm,{Op-PO!P%UX!S%UX!T%UX%Y%UX!X%UX!]%UX!O%UX#W%UX!k%UX~P(fO%Y%[Ox%TX!P%TX!S%TX!T%TX!X%TXy%TX~Ox%_O!P%^O!S%cO!T%bO~O!P%^O~Ox%fO!S%cO!T%bO!X%aX~O!X%jO~Ox%kOy%mO!S%cO!T%bO!]%[X~O!]%qO~O!]%rO~O%i#WO%j%tO~O%l#ZO%m%tO~OT%wOl,qOs-OO}vO~P'UO![#]O%o#^O%s%zO~O![#]O%u#aO%v%zO~O![#]O%j%zO%x#cO~O![#]O%m%zO%z#eO~OT!ma]!ma_!maf!mah!mai!maj!mak!mal!mam!map!max!may!ma!W!ma!e!ma!t!ma#_!ma$j!ma$m!ma$w!ma$x!ma$y!ma$z!ma${!ma$|!ma$}!ma%O!ma%P!ma%Q!ma%X!ma!P!ma!S!ma!T!ma%Y!ma!X!ma!]!ma!O!ma#W!maq!ma!k!ma~P#yOx#jOy$ua!t$ua#_$ua$j$ua$m$ua%X$ua~P$bOT&QOltOsuOx$YXy$YX!t$YX#_$YX$j$YX$m$YX%X$YX~P'UOx#jOy$ua!t$ua#_$ua$j$ua$m$ua%X$ua~OPhOTeOltOsuO}vO!O!PO!wxO!yyO!{zO!}{O#P|O#T}O#V!OO#Y!QO#Z!QO#]!RO#_$aX$j$aX$m$aX~P'UO#_#mO$j&VO$m&VO~O!e&WOf%|X$j%|X#W%|X#_%|X$m%|X#V%|X~Of!jO$j&YO~Ohcaicajcakcalcamcapcaxcayca!tca#_ca$jca$mca%Xca!Pca!Sca!Tca%Yca!Xca!]ca!Oca#Wcaqca!kca~P$bOpnaxnayna#_na$jna$mna%Xna~Oh!pOi!qOj!oOk!oOl!rOm!sO!tna~PDWO%X&[Ox%WXy%WX~O%SVOx%WXy%WX~Ox&_OytX~Oy&aO~Ox%kO#_%[X$j%[X$m%[X!P%[Xy%[X!]%[X!k%[X%X%[X~OT,yOl,qOs-OO}vO~P'UO%X$SO#_Sa$jSa$mSa~O%X$SO~Ox&jO#_%^X$j%^X$m%^Xk%^X~P$bOx&mO!O&lO#_#Sa$j#Sa$m#Sa~O#W&nO#_#Ua$j#Ua$m#Ua~O!e$^O!n$^O#V&pO%SVO~O#V&pO~Ox&rO#_&OX$j&OX$m&OX~Ox&tO#_%{X$j%{X$m%{Xy%{X~Ox&xOk&QX~P$bOk&{O~OPhOTeOltOsuO}vO!O!PO!wxO!yyO!{zO!}{O#P|O#T}O#V!OO#Y!QO#Z!QO#]!RO$j'QO~P'UOq'UO#h'SO#i'TOP#faT#fad#faf#fal#fap#fas#fau#fa}#fa!O#fa!S#fa!T#fa!W#fa![#fa!g#fa!n#fa!o#fa!p#fa!w#fa!y#fa!{#fa!}#fa#P#fa#T#fa#V#fa#Y#fa#Z#fa#]#fa#d#fa#g#fa#k#fa#m#fa#r#fa#u#fa$i#fa$j#fa$|#fa$}#fa%R#fa%S#fa%g#fa%h#fa%k#fa%n#fa%t#fa%w#fa%y#fa$m#fa$n#fa$o#fa~Ox'VO#W'XOy&RX~Of'ZO~Of!jOy$mO~OT!aO]!aO_!bOf!jO!W!lO!e!mO$y!^O$z!_O${!_O$|!`O$}!`O%O!aO%P!aO%Q!aOhUiiUijUikUilUimUipUixUiyUi!tUi#_Ui$jUi$mUi$wUi%XUi!PUi!SUi!TUi%YUi!XUi!]Ui!OUi#WUiqUi!kUi~O$x!]O~P! SO$xUi~P! SOT!aO]!aO_!bOf!jO!W!lO!e!mO$|!`O$}!`O%O!aO%P!aO%Q!aOhUiiUijUikUilUimUipUixUiyUi!tUi#_Ui$jUi$mUi$wUi$xUi$yUi%XUi!PUi!SUi!TUi%YUi!XUi!]Ui!OUi#WUiqUi!kUi~O$z!_O${!_O~P!#}O$zUi${Ui~P!#}O_!bOf!jO!W!lO!e!mOhUiiUijUikUilUimUipUixUiyUi!tUi#_Ui$jUi$mUi$wUi$xUi$yUi$zUi${Ui$|Ui$}Ui%XUi!PUi!SUi!TUi%YUi!XUi!]Ui!OUi#WUiqUi!kUi~OT!aO]!aO%O!aO%P!aO%Q!aO~P!&{OTUi]Ui%OUi%PUi%QUi~P!&{Of!jO!W!lO!e!mOTUi]Ui_UihUiiUijUikUilUimUipUixUiyUi!tUi#_Ui$jUi$mUi$wUi$xUi$yUi$zUi${Ui$|Ui$}Ui%OUi%PUi%QUi%XUi!PUi!SUi!TUi%YUi!XUi!]Ui!OUi#WUiqUi!kUi~O!S%cO!T%bOx%dX!P%dX~O%X'`O%Y'`O~P+{Ox'bO!P%cX~O!P'dO~Ox'eOy'gO!X%eX~Ol,qOs-OOx'eOy'hO!X%eX~P'UO!X'jO~Oj!oOk!oOl!rOm!sOhgipgixgiygi!tgi#_gi$jgi$mgi%Xgi~Oi!qO~P!.^Oigi~P!.^Oh,sOi,tOj,rOk,rOl,zOm,{O~Oq'lO~P!/gOT'qOl,qOs-OO!P'rO~P'UOx'sO!P'rO~O!P'uO~O!T'wO~Ox'sO!P'xO!S%cO!T%bO~P$bOh,sOi,tOj,rOk,rOl,zOm,{O!Pna!Sna!Tna%Yna!Xna!]na!Ona#Wnaqna!kna~PDWOT'|Ol,qOs-OOx#{X!X#{X~P'UOx%fO!X%aa~O!X(OO~Ox%fO!S%cO!T%bO!X%aa~P$bOT(SOl,qOs-OOx#xX!]#xX#_#xX$j#xX$m#xX!P#xXy#xX!k#xX%X#xX~P'UOx%kO!]%[a#_%[a$j%[a$m%[a!P%[ay%[a!k%[a%X%[a~O!](VO~Ox%kO!S%cO!T%bO!]%[a~P$bOx(YO!S%cO!T%bO!]%ba~P$bOx(]Oy%pX!]%pX!k%pX~Oy(`O!](bO!k(cO~Ox#jOy$ui!t$ui#_$ui$j$ui$m$ui%X$ui~O!e&WOf%|a$j%|a#W%|a#_%|a$m%|a#V%|a~O$j(gO~OT#yO_#zOu#xO%SVO~Ox&_Oyta~OltOsuO~P'UOx%kO#_%[a$j%[a$m%[a!P%[ay%[a!]%[a!k%[a%X%[a~P$bOx(lO#_$uX$j$uX$m$uX%X$uX~O%X$SO#_Si$jSi$mSi~Ox#zX#_#zX$j#zX$m#zXk#zX~P'UOx&jO#_%^a$j%^a$m%^ak%^a~OT(rOf(tO%SVO~O#V(uO~O%SVOx$`X#_$`X$j$`X$m$`X~Ox&rO#_&Oa$j&Oa$m&Oa~Ol,qOs-OOx$[X#_$[X$j$[X$m$[Xy$[X~P'UOx&tO#_%{a$j%{a$m%{ay%{a~Oq(|O#b({OP#`iT#`id#`if#`il#`ip#`is#`iu#`i}#`i!O#`i!S#`i!T#`i!W#`i![#`i!g#`i!n#`i!o#`i!p#`i!w#`i!y#`i!{#`i!}#`i#P#`i#T#`i#V#`i#Y#`i#Z#`i#]#`i#d#`i#g#`i#k#`i#m#`i#r#`i#u#`i$i#`i$j#`i$|#`i$}#`i%R#`i%S#`i%g#`i%h#`i%k#`i%n#`i%t#`i%w#`i%y#`i$m#`i$n#`i$o#`i~Oq(}OP#ciT#cid#cif#cil#cip#cis#ciu#ci}#ci!O#ci!S#ci!T#ci!W#ci![#ci!g#ci!n#ci!o#ci!p#ci!w#ci!y#ci!{#ci!}#ci#P#ci#T#ci#V#ci#Y#ci#Z#ci#]#ci#d#ci#g#ci#k#ci#m#ci#r#ci#u#ci$i#ci$j#ci$|#ci$}#ci%R#ci%S#ci%g#ci%h#ci%k#ci%n#ci%t#ci%w#ci%y#ci$m#ci$n#ci$o#ci~OT)POk$dXx$dX~P'UOx&xOk&Qa~Ox&xOk&Qa~P$bOk)TO~OPhOTeOltOp!SOsuO}vO!O!PO!S!VO!T!UO!wxO!yyO!{zO!}{O#P|O#T}O#V!OO#Y!QO#Z!QO#]!RO#d!TO#g!WO#k!XO#m!YO#r!ZO#ulO~P'UOq)ZO#h'SO#i)YOP#fiT#fid#fif#fil#fip#fis#fiu#fi}#fi!O#fi!S#fi!T#fi!W#fi![#fi!g#fi!n#fi!o#fi!p#fi!w#fi!y#fi!{#fi!}#fi#P#fi#T#fi#V#fi#Y#fi#Z#fi#]#fi#d#fi#g#fi#k#fi#m#fi#r#fi#u#fi$i#fi$j#fi$|#fi$}#fi%R#fi%S#fi%g#fi%h#fi%k#fi%n#fi%t#fi%w#fi%y#fi$m#fi$n#fi$o#fi~Ol,qOs-OOy$mO~P'UOl,qOs-OOx$fXy$fX~P'UOx'VOy&Ra~OT)dO_)eOu)cO%O)fO%SVO~O!P)hO~P!IoOy$mO&U)jO~OT$|O_$|Ol,qOs-OOx#}X!P#}X~P'UOx'bO!P%ca~Ol,qOs-OOy)rOx$OX!X$OX~P'UOx'eO!X%ea~Ol,qOs-OOx'eOy)uO!X%ea~P'UOl,qOs-OOx'eO!X%ea~P'UOx'eOy)uO!X%ea~Oj,rOk,rOl,zOm,{Ohgipgixgi!Pgi!Sgi!Tgi%Ygi!Xgiygi!]gi#_gi$jgi$mgi!Ogi#Wgiqgi!kgi%Xgi~Oi,tO~P!LlOigi~P!LlOT'qOl,qOs-OO!P)zO~P'UOk)|O~Ox*OO!P)zO~O!P*PO~Ox%fO!X%ai~O!X*RO~Ox(YO!S%cO!T%bO!]%bi~Ox%kO!]%[i#_%[i$j%[i$m%[i!P%[iy%[i!k%[i%X%[i~O!]*VO~O_*XOl,qOs-OOx#|X!]#|X~P'UOx(YO!]%bi~O!]*ZO~OT*]Ol,qOs-OOx$SXy$SX!]$SX!k$SX~P'UOx(]Oy%pa!]%pa!k%pa~O![#]O%r*`O!]!lX~O!]*bO~Oy(`O!]*cO~Ox$Yiy$Yi!t$Yi#_$Yi$j$Yi$m$Yi%X$Yi~P$bOT&QOl,qOs-OOx$YX#_$YX$j$YX$m$YX%X$YX~P'UOx(lO#_$ua$j$ua$m$ua%X$ua~Ox#za#_#za$j#za$m#zak#za~P$bOx*eO#_#Sq$j#Sq$m#Sq~Ox*fO#W*hO#_%}X$j%}X$m%}X!P%}X~OT*jOf*kO%SVO~Oq*mO#b({OP#`qT#`qd#`qf#`ql#`qp#`qs#`qu#`q}#`q!O#`q!S#`q!T#`q!W#`q![#`q!g#`q!n#`q!o#`q!p#`q!w#`q!y#`q!{#`q!}#`q#P#`q#T#`q#V#`q#Y#`q#Z#`q#]#`q#d#`q#g#`q#k#`q#m#`q#r#`q#u#`q$i#`q$j#`q$|#`q$}#`q%R#`q%S#`q%g#`q%h#`q%k#`q%n#`q%t#`q%w#`q%y#`q$m#`q$n#`q$o#`q~Ok$dax$da~P$bOx&xOk&Qi~O$m*yO$n*wO$o*yO~Ox*}Oy$mO#W*}O~O#i+OOP#fqT#fqd#fqf#fql#fqp#fqs#fqu#fq}#fq!O#fq!S#fq!T#fq!W#fq![#fq!g#fq!n#fq!o#fq!p#fq!w#fq!y#fq!{#fq!}#fq#P#fq#T#fq#V#fq#Y#fq#Z#fq#]#fq#d#fq#g#fq#k#fq#m#fq#r#fq#u#fq$i#fq$j#fq$|#fq$}#fq%R#fq%S#fq%g#fq%h#fq%k#fq%n#fq%t#fq%w#fq%y#fq$m#fq$n#fq$o#fq~O#W+POx$fay$fa~Ox'VOy&Ri~Oy$RO%X+ROx&TX!P&TX~O%SVOx&TX!P&TX~Ox+VO!P&SX~O!P+XO~Oy+ZOx$Oa!X$Oa~Ol,qOs-OOy+[Ox$Oa!X$Oa~P'UOx'eO!X%ei~Ol,qOs-OOx'eO!X%ei~P'UOx'eOy+`O!X%ei~Ox#yi!P#yi~P$bOT'qOl,qOs-OO~P'UOk+bO~OT'qOl,qOs-OO!P+cO~P'UOx#{i!X#{i~P$bOx#xi!]#xi#_#xi$j#xi$m#xi!P#xiy#xi!k#xi%X#xi~P$bOx(YO!]%bq~O!]+dO~Oy+eO~Ox(]Oy%pi!]%pi!k%pi~O![#]O%r*`O!]!la~Ox(lO#_$ui$j$ui$m$ui%X$ui~O%SVOx$_X#_$_X$j$_X$m$_X!P$_X~Ox*fO#_%}a$j%}a$m%}a!P%}a~O!P+mO~Ok$dix$di~P$bOq+qOP#eyT#eyd#eyf#eyl#eyp#eys#eyu#ey}#ey!O#ey!S#ey!T#ey!W#ey![#ey!g#ey!n#ey!o#ey!p#ey!w#ey!y#ey!{#ey!}#ey#P#ey#T#ey#V#ey#Y#ey#Z#ey#]#ey#d#ey#g#ey#k#ey#m#ey#r#ey#u#ey$i#ey$j#ey$|#ey$}#ey%R#ey%S#ey%g#ey%h#ey%k#ey%n#ey%t#ey%w#ey%y#ey$m#ey$n#ey$o#ey~O$m+vO$n*wO$o+vO~O#i+wOP#fyT#fyd#fyf#fyl#fyp#fys#fyu#fy}#fy!O#fy!S#fy!T#fy!W#fy![#fy!g#fy!n#fy!o#fy!p#fy!w#fy!y#fy!{#fy!}#fy#P#fy#T#fy#V#fy#Y#fy#Z#fy#]#fy#d#fy#g#fy#k#fy#m#fy#r#fy#u#fy$i#fy$j#fy$|#fy$}#fy%R#fy%S#fy%g#fy%h#fy%k#fy%n#fy%t#fy%w#fy%y#fy$m#fy$n#fy$o#fy~Ox'VOy&Rq~O%X+ROx&Ta!P&Ta~Ox$gX!P$gX~P!IoOx+VO!P&Sa~Ol,qOs-OOy,POx$Oi!X$Oi~P'UOl,qOs-OOx$Oi!X$Oi~P'UOy,POx$Oi!X$Oi~Ox'eO!X%eq~Ol,qOs-OOx'eO!X%eq~P'UOp,UO!S%cO!T%bO!P%]q!X%]q!]%]qx%]q~P!/gOx#|i!]#|i~P$bO#W,YOx$_a#_$_a$j$_a$m$_a!P$_a~Ox*fO#_%}i$j%}i$m%}i!P%}i~O!P,[O~Oq,^OP#e!RT#e!Rd#e!Rf#e!Rl#e!Rp#e!Rs#e!Ru#e!R}#e!R!O#e!R!S#e!R!T#e!R!W#e!R![#e!R!g#e!R!n#e!R!o#e!R!p#e!R!w#e!R!y#e!R!{#e!R!}#e!R#P#e!R#T#e!R#V#e!R#Y#e!R#Z#e!R#]#e!R#d#e!R#g#e!R#k#e!R#m#e!R#r#e!R#u#e!R$i#e!R$j#e!R$|#e!R$}#e!R%R#e!R%S#e!R%g#e!R%h#e!R%k#e!R%n#e!R%t#e!R%w#e!R%y#e!R$m#e!R$n#e!R$o#e!R~Ol,qOs-OOx$Oq!X$Oq~P'UOy,cOx$Oq!X$Oq~Ox'eO!X%ey~Ol,qOs,gO~P'UOp,UO!S%cO!T%bO!P%]y!X%]y!]%]yx%]y~P!/gOx*fO#_%}q$j%}q$m%}q!P%}q~Ol,qOs-OOx$Oy!X$Oy~P'UOx'eO!X%e!R~Op%`X!P%`X!S%`X!T%`X!X%`X!]%`Xx%`X~P!/gOp,UO!S%cO!T%bO!P%_a!X%_a!]%_ax%_a~Oy,oO~Ox(lO#_$ua$j$ua$m$ua%X$ua~P$bOk,vO~Ol,vO~P'UOy,wO~Oq,xO~P!/gO%h%k%w%y%g%n%t%S%g~",goto:"!&h&UPPPP&VP&_(|)d){*e+O+jP,VP&_,t,t&_P&_P/cPPPPPP/c1bPP1bP2}P3W7`PP7c7o7rPPP&_&_PP8O&_PP&_&_PP&_&_&_&_8S8x&_P8{P9O9O;qP<V&_PPP<Z<a&VP&V&VP&VP&VP&VP&VP&V&V&VP&VPP&VPP&VP<gP<n<tP<nP<n<nPPP<nP>mP>v>|?S>mP<n?YP?a?g?m?y@T@Z@e@o@uAcAiAoAuBPBVB]BcBiBoCRC]CcCiCoCyDPDVD]DcDmDsD}ETPPPPPPPPPE^EhEqE{FWPPPPPPPPPPPPI}JgNU!!qPP!!y!#X!#b!$W!#}!$a!$g!$j!$m!$p!$vPPPPPPPPPP!$y!$|PPPPPPPPP!%S!%`!%l!%x!%{!&R!&X!&_!&b]iOr#m$m'Q*w&XdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!j!l!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m$|%R%Y%]%_%b%f%k%m%w&Q&]&a&j&l&m&t&x&{'Q'S'V'a'b'e'g'h'l'q's'w'|(S(Y(](l({)P)T)j)r)u){)|*O*X*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,y,{-Py!cP#i#v$X$g%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u{!dP#i#v$X$g$s%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u}!eP#i#v$X$g$s$t%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u!P!fP#i#v$X$g$s$t$u%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u!R!gP#i#v$X$g$s$t$u$v%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u!T!hP#i#v$X$g$s$t$u$v$w%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u!X!iP!n#i#v$X$g$s$t$u$v$w$x%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,u&XSOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!j!l!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m$|%R%Y%]%_%b%f%k%m%w&Q&]&a&j&l&m&t&x&{'Q'S'V'a'b'e'g'h'l'q's'w'|(S(Y(](l({)P)T)j)r)u){)|*O*X*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,y,{-P$yUOXYZhrtv|}!R!S!T!X!j!l!o!p!q!s!t#]#j#m$P$R$T$W$k$m$|%R%Y%]%_%f%k%m%w&]&a&l&m&t&{'Q'S'V'a'b'e'g'h'l's(Y(](l({)T)j)r)u){)|*O*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,{-P$TWOXYZhrv|}!R!S!T!X!j!l#]#j#m$P$R$T$W$k$m$|%R%]%_%f%k%m%w&]&a&l&m&t&{'Q'S'V'a'b'e'g'h'l's(Y(](l({)T)j)r)u){*O*]*e*w+S+Z+[+`+e+|,P,c,w,xQ#|uQ,m,gR,|-O&SdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!l!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m$|%R%Y%]%_%b%f%k%m%w&Q&]&a&j&l&m&t&x&{'Q'S'V'a'e'g'h'l'q's'w'|(S(Y(](l({)P)T)j)r)u){)|*O*X*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,y,{-PW#pl!O!P$_W#xu&_,g-OQ$a!QQ$q!YQ$r!ZS${!j'bS&^#y#zQ'O$lQ(e&WQ(r&nW(s&p(t(u*kQ(v&rQ)b'XS)c'Z+VS+U)d)eQ+j*fQ+l*hQ+x*}Q+z+PR,j,YR&]#xe!wXY!S!T%_%f's({){*OR%]!vQ!{XQ%x#]Q&f$TR&i$WT,f,U,o!Y!kP!n#i#v$X$g$s$t$u$v$w$x$y%d%i%o%p&b&z(d(n)O)y*Q*S*r+f,uQ&Z#qR'^$rR'a${R%U!m&WcOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!j!l!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m$|%R%Y%]%_%b%f%k%m%w&Q&]&a&j&l&m&t&x&{'Q'S'V'a'b'e'g'h'l'q's'w'|(S(Y(](l({)P)T)j)r)u){)|*O*X*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,y,{-PT#gc#hS#^_#_S#a`#bS#ca#dS#eb#fT*`(`*aT(a%x(cQ$VwR+T)cX$Tw$U$V&hZkOr$m'Q*wXoOr'Q*wQ$n!WQ&v$eQ&w$fQ'Y$pQ']$rQ)U&}Q)['SQ)^'TQ)_'UQ)k'[Q)m'^Q*n({Q*p(|Q*q(}Q*s)SS*u)V)lQ*z)YQ*{)ZQ*|)]Q+o*mQ+p*oQ+r*tQ+s*vQ+y+OQ,]+qQ,_+wQ,`+xR,k,^WoOr'Q*wR#snQ'[$qR)V'OQ+S)cR+|+TQ)l'[R*v)VZmOnr'Q*wQrOR#urQ&`#{R(j&`S%l#Q#}S(T%l(WT(W%o&bQ%`!yS't%`'yR'y%dQ&k$XR(o&kQ%g!|S'}%g(PR(P%iQ(Z%pQ*T(UT*Y(Z*TQ'c$}R)p'cS'f%Q%RY)s'f)t+^,S,dU)t'g'h'iU+^)u)v)wS,S+_+`R,d,TQ#X]R%s#XQ#[^R%u#[Q#__R%y#_Q(^%vS*^(^*_R*_(_Q*a(`R+h*aQ#b`R%{#bQ#daR%|#dQ#fbR%}#fQ#hcR&O#hQ#kfQ&P#iW&S#k&P(m*dQ(m&eR*d,uQ$UwS&g$U&hR&h$VQ&u$cR(y&uQ&X#pR(f&XQ$_!PR&o$_Q*g(sS+k*g,ZR,Z+lQ&s$aR(w&sQ#njR&U#nQ*x)WR+u*xQ(z&vR*l(zQ&y$gS)Q&y)RR)R&zQ'R$nR)X'RQ'W$oS)a'W+QR+Q)bQ+W)gR,O+WWnOr'Q*wR#rnSqOrQ)W'QR+t*wWpOr'Q*wR'P$mYjOr$m'Q*wR&T#m[wOr#m$m'Q*wR&f$T$xPOXYZhrtv|}!R!S!T!X!j!l!o!p!q!s!t#]#j#m$P$R$T$W$k$m$|%R%Y%]%_%f%k%m%w&]&a&l&m&t&{'Q'S'V'a'b'e'g'h'l's(Y(](l({)T)j)r)u){)|*O*]*e*w+S+Z+[+`+b+e+|,P,U,c,o,q,r,s,t,v,w,x,{-PQ!nSQ#ieQ#vsU$Xx%b'wS$g!U$jQ$s!cQ$t!dQ$u!eQ$v!fQ$w!gQ$x!hQ$y!iQ%d!zQ%i!}Q%o#RQ%p#SQ&b$OQ&z$hQ(d&QQ(n&jQ)O&xQ)y'qQ*Q'|Q*S(SQ*r)PQ+f*XR,u,yQ!yXQ!|YQ$e!SQ$f!TW'p%_'s){*OQ'{%fR*o({[fOr#m$m'Q*wd!vXY!S!T%_%f's({){*OQ#QZQ#lhS#}v|Q$[}W$c!R$W&{)TS$o!X$kS$z!j'bQ%Q!lQ%v#]S&R#j(lQ&c$PQ&d$RQ&e$TQ'_$|Q'i%RQ'o%]Q(R%kQ(U%mQ(_%wQ(h&]S(k&a,wQ(p&lQ(q&mQ(x&tQ)]'SQ)`'VQ)n'aQ)q'eQ)v'gQ)w'hS)x'l,xQ*W(YQ*[(]Q+Y)jQ+])rQ+_)uQ+g*]Q+i*eQ+{+SQ,Q+ZQ,R+[Q,T+`Q,X+eQ,a+|Q,b,PR,l,cbTOr#j#m$m&a'Q'l*w#p!uXYZhv|}!R!S!T!X!j!l#]$P$R$T$W$k$|%R%]%_%f%k%m%w&]&l&m&t&{'S'V'a'b'e'g'h's(Y(](l({)T)j)r)u){*O*]*e+S+Z+[+`+e+|,P,c,w,xQ#wtW%V!o!s,r,{Q%W!pQ%X!qQ%Z!tQ%e,qS'k%Y,vQ'm,sQ'n,tQ+a)|Q,W+bS,e,U,oR,}-PU#{u,g-OR(i&_[gOr#m$m'Q*wX!xX#]$T$WQ#VZQ$QvR$Z|Q%a!yQ%h!|Q%n#QQ'_$zQ'z%dQ(Q%iQ(X%oQ([%pQ*U(UQ,V+aQ,i,WR,n,hQ$YxQ'v%bR)}'wQ,h,UR,p,oR#PYR#UZR%P!jQ$}!jR)o'bR%S!lR%x#]Q(b%xR*c(cQ$d!RQ&i$WQ)S&{R*t)TQ#qlQ$]!OQ$`!PR&q$_Q(r&pQ*i(tQ*j(uR+n*kR$b!QXpOr'Q*wQ$i!UR&|$jQ$p!XR&}$kR)i'ZQ)g'ZR+}+V",nodeNames:"⚠ print Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ParenthesizedExpression ( BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList self VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from ) TupleExpression ComprehensionExpression async for LambdaExpression ArrayExpression [ ] ArrayComprehensionExpression DictionaryExpression { } DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At",maxTerm:236,nodeProps:[[x.group,-14,4,81,83,84,86,88,90,92,94,95,96,98,101,104,"Statement Statement",-23,6,16,19,21,37,38,48,49,53,56,57,60,61,62,63,66,69,70,71,75,76,77,78,"Expression",-9,106,108,111,113,114,118,120,125,127,"Statement"]],skippedNodes:[0,2],repeatNodeCount:33,tokenData:"!E}MgR!^OX$}XY%wY[$}[]%w]p$}pq%wqr(crs*Ust2Otu$}uv4Qvw5Uwx5xxyAWyzAtz{Bb{|Cr|}Df}!OES!O!PFZ!P!QKa!Q!RLq!R![!(P![!]!)i!]!^!*m!^!_!+Z!_!`!,k!`!a!-_!a!b$}!b!c!.l!c!d!/b!d!e!1f!e!h!/b!h!i!8O!i!t!/b!t!u!=b!u!w!/b!w!x!?`!x!}!/b!}#O!@t#O#P!Ab#P#Q!Bc#Q#R!CP#R#S!/b#S#T$}#T#U!/b#U#V!1f#V#Y!/b#Y#Z!8O#Z#f!/b#f#g!=b#g#i!/b#i#j!?`#j#o!/b#o#p!Cs#p#q!D[#q#r!EO#r#s!Ea#s$g$}$g~!/b<r%`R%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%i7[%nR%r7[O#o%i#p#q%i#r~%iMg&[Z%o`%up%r7[%x!b%z#t%iS%lW$q1sOX%iXY&}Y[%i[]&}]p%ipq&}q#O%i#O#P'w#P#o%i#p#q%i#r~%iHP'UZ%r7[$q1sOX%iXY&}Y[%i[]&}]p%ipq&}q#O%i#O#P'w#P#o%i#p#q%i#r~%iHP'|V%r7[OY%iYZ&}Z]%i]^&}^#o%i#p#q%i#r~%i<u(tY%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`)d!`#T%i#T#U)t#U#f%i#f#g)t#g#h)t#h#o%i#p#q%i#r~%i7_)kRjR%r7[O#o%i#p#q%i#r~%i7_){R!kR%r7[O#o%i#p#q%i#r~%iG{*e]%vp%o`%r7[%x!b%iS%g,XOY+^YZ.{Z]+^]^.{^r+^rs/]s#O+^#O#P0|#P#o+^#o#p1b#p#q+^#q#r1b#r~+^Bm+g]%r7[%lW%g,XOY,`YZ%iZ],`]^%i^r,`rs-`s#O,`#O#P-p#P#o,`#o#p.U#p#q,`#q#r.U#r~,`Be,g]%r7[%g,XOY,`YZ%iZ],`]^%i^r,`rs-`s#O,`#O#P-p#P#o,`#o#p.U#p#q,`#q#r.U#r~,`Be-gR%r7[%g,XO#o%i#p#q%i#r~%iBe-uT%r7[O#o,`#o#p.U#p#q,`#q#r.U#r~,`,X.ZV%g,XOY.UZ].U^r.Urs.ps#O.U#O#P.u#P~.U,X.uO%g,X,X.xPO~.U7d/SR%r7[%lWO#o%i#p#q%i#r~%iEc/dX%r7[%g,XOr.{rs0Ps#O.{#O#P0c#P#o.{#o#p0w#p#q.{#q#r0w#r~.{Ec0YR%m#|%r7[%k,XO#o%i#p#q%i#r~%i7d0hT%r7[O#o.{#o#p0w#p#q.{#q#r0w#r~.{W0|O%lWBm1RT%r7[O#o+^#o#p1b#p#q+^#q#r1b#r~+^,a1iV%lW%g,XOY.UZ].U^r.Urs.ps#O.U#O#P.u#P~.UMg2cXQ1s%o`%up%r7[%x!b%z#t%iS%lWOY3OYZ%iZ]3O]^%i^#o3O#o#p3r#p#q3O#q#r3r#r~3OHP3VXQ1s%r7[OY3OYZ%iZ]3O]^%i^#o3O#o#p3r#p#q3O#q#r3r#r~3O1s3wRQ1sOY3rZ]3r^~3rGz4eT%PQ%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iBd4{R!t,W%r7[O#o%i#p#q%i#r~%iGz5iT$yQ%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iG{6X_%s`%up%r7[%z#t%lW%g,XOY7WYZ:dZ]7W]^:d^r7Wrs:xsw7Wwx;|x#O7W#O#P>n#P#o7W#o#p?t#p#q7W#q#r?S#r~7WFq7e]%r7[%x!b%z#t%iS%g,XOY8^YZ%iZ]8^]^%i^w8^wx-`x#O8^#O#P9^#P#o8^#o#p9r#p#q8^#q#r9r#r~8^Be8e]%r7[%g,XOY8^YZ%iZ]8^]^%i^w8^wx-`x#O8^#O#P9^#P#o8^#o#p9r#p#q8^#q#r9r#r~8^Be9cT%r7[O#o8^#o#p9r#p#q8^#q#r9r#r~8^,X9wV%g,XOY9rZ]9r^w9rwx.px#O9r#O#P:^#P~9r,X:aPO~9r;h:oR%r7[%x!b%z#t%iSO#o%i#p#q%i#r~%iC{;T]%r7[%x!b%iS%g,XOY8^YZ%iZ]8^]^%i^w8^wx-`x#O8^#O#P9^#P#o8^#o#p9r#p#q8^#q#r9r#r~8^Fq<VZ%r7[%z#t%g,XOr:drs<xsw:dwx=[x#O:d#O#P=p#P#o:d#o#p>_#p#q:d#q#r>U#r~:d8r=RR%r7[%x!b%iSO#o%i#p#q%i#r~%iFq=gR%j!f%r7[%z#t%h,XO#o%i#p#q%i#r~%i;h=uT%r7[O#o:d#o#p>U#p#q:d#q#r>U#r~:d%[>_O%x!b%z#t%iS%[>dP%iS#o#p>g%W>nO%x!b%z#tFq>sT%r7[O#o7W#o#p?S#p#q7W#q#r?S#r~7W0e?_V%x!b%z#t%iS%g,XOY9rZ]9r^w9rwx.px#O9r#O#P:^#P~9r0e?{X%iS%g,XOY9rZ]9r^w9rwx.px#O9r#O#P:^#P#o9r#o#p@h#p~9r0a@qV%x!b%z#t%g,XOY9rZ]9r^w9rwx.px#O9r#O#P:^#P~9rG{AkRf,X%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%i<uBXR!PR%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iG{BuVT,X%o`%up%r7[%x!b%z#t%iS%lWOz%iz{C[{!_%i!_!`4t!`#o%i#p#q%i#r~%iBeCcT_R%r7[O!_%i!_!`4t!`#o%i#p#q%i#r~%iG{DVT$|,X%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iG{DyRx,X%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iMgEgU$},X%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`!aEy!a#o%i#p#q%i#r~%i<vFQR&U&j%r7[O#o%i#p#q%i#r~%iG{FnV!eQ%o`%up%r7[%x!b%z#t%iS%lWO!O%i!O!PGT!P!Q%i!Q![Gy![#o%i#p#q%i#r~%iBeGYT%r7[O!O%i!O!PGi!P#o%i#p#q%i#r~%iBeGpR!n,X%r7[O#o%i#p#q%i#r~%iBcHQ_!g,V%r7[O!Q%i!Q![Gy![!g%i!g!hIP!h!l%i!l!mKP!m#R%i#R#SGy#S#X%i#X#YIP#Y#^%i#^#_KP#_#o%i#p#q%i#r~%iBcIUX%r7[O{%i{|Iq|}%i}!OIq!O!Q%i!Q![JV![#o%i#p#q%i#r~%iBcIvT%r7[O!Q%i!Q![JV![#o%i#p#q%i#r~%iBcJ^Z!g,V%r7[O!Q%i!Q![JV![!l%i!l!mKP!m#R%i#R#SJV#S#^%i#^#_KP#_#o%i#p#q%i#r~%iBcKWR!g,V%r7[O#o%i#p#q%i#r~%iG{KtV%OR%o`%up%r7[%x!b%z#t%iS%lWO!P%i!P!QLZ!Q!_%i!_!`4t!`#o%i#p#q%i#r~%iBdLbT%QQ%r7[O!_%i!_!`4t!`#o%i#p#q%i#r~%iGyMUm!g,V%o`%up%r7[%x!b%z#t%iS%lWO!O%i!O!P! P!P!Q%i!Q![!!k![!d%i!d!e!#w!e!g%i!g!hIP!h!l%i!l!mKP!m!q%i!q!r!%V!r!z%i!z!{!&_!{#R%i#R#S!!k#S#U%i#U#V!#w#V#X%i#X#YIP#Y#^%i#^#_KP#_#c%i#c#d!%V#d#l%i#l#m!&_#m#o%i#p#q%i#r~%iBc! UT%r7[O!Q%i!Q![! e![#o%i#p#q%i#r~%iBc! l_!g,V%r7[O!Q%i!Q![! e![!g%i!g!hIP!h!l%i!l!mKP!m#R%i#R#S! e#S#X%i#X#YIP#Y#^%i#^#_KP#_#o%i#p#q%i#r~%iBc!!ra!g,V%r7[O!O%i!O!P! P!P!Q%i!Q![!!k![!g%i!g!hIP!h!l%i!l!mKP!m#R%i#R#S!!k#S#X%i#X#YIP#Y#^%i#^#_KP#_#o%i#p#q%i#r~%iBc!#|W%r7[O!Q%i!Q!R!$f!R!S!$f!S#R%i#R#S!$f#S#o%i#p#q%i#r~%iBc!$mW!g,V%r7[O!Q%i!Q!R!$f!R!S!$f!S#R%i#R#S!$f#S#o%i#p#q%i#r~%iBc!%[V%r7[O!Q%i!Q!Y!%q!Y#R%i#R#S!%q#S#o%i#p#q%i#r~%iBc!%xV!g,V%r7[O!Q%i!Q!Y!%q!Y#R%i#R#S!%q#S#o%i#p#q%i#r~%iBc!&dZ%r7[O!Q%i!Q![!'V![!c%i!c!i!'V!i#R%i#R#S!'V#S#T%i#T#Z!'V#Z#o%i#p#q%i#r~%iBc!'^Z!g,V%r7[O!Q%i!Q![!'V![!c%i!c!i!'V!i#R%i#R#S!'V#S#T%i#T#Z!'V#Z#o%i#p#q%i#r~%iGy!(da!g,V%o`%up%r7[%x!b%z#t%iS%lWO!O%i!O!P! P!P!Q%i!Q![!!k![!g%i!g!hIP!h!l%i!l!mKP!m#R%i#R#S!!k#S#X%i#X#YIP#Y#^%i#^#_KP#_#o%i#p#q%i#r~%iMg!)|Ty1s%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`!*]!`#o%i#p#q%i#r~%i7_!*dR%YR%r7[O#o%i#p#q%i#r~%iG{!+QR#_,X%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iG{!+nVjR%o`%up%r7[%x!b%z#t%iS%lWO!^%i!^!_!,T!_!`)d!`!a)d!a#o%i#p#q%i#r~%iBd!,[T$zQ%r7[O!_%i!_!`4t!`#o%i#p#q%i#r~%iG{!-OT%X,X%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`)d!`#o%i#p#q%i#r~%iG{!-rUjR%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`)d!`!a!.U!a#o%i#p#q%i#r~%iBd!.]T${Q%r7[O!_%i!_!`4t!`#o%i#p#q%i#r~%iG{!/RT]Q#uP%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iMg!/wZ%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XO!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jHP!0sZ%r7[%f&j%S,XO!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jMg!1{c%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XOr%irs!3Wsw%iwx!5Ox!Q%i!Q![!0j![!c%i!c!t!0j!t!u!6v!u!}!0j!}#R%i#R#S!0j#S#T%i#T#f!0j#f#g!6v#g#o!0j#p#q%i#r$g%i$g~!0jBe!3_]%r7[%g,XOY,`YZ%iZ],`]^%i^r,`rs!4Ws#O,`#O#P-p#P#o,`#o#p.U#p#q,`#q#r.U#r~,`Be!4_T%r7[%g,XOr%irs!4ns#o%i#p#q%i#r~%iBe!4uR%r7[%k,XO#o%i#p#q%i#r~%iBe!5V]%r7[%g,XOY8^YZ%iZ]8^]^%i^w8^wx!6Ox#O8^#O#P9^#P#o8^#o#p9r#p#q8^#q#r9r#r~8^Be!6VT%r7[%g,XOw%iwx!6fx#o%i#p#q%i#r~%iBe!6mR%r7[%h,XO#o%i#p#q%i#r~%iHP!7P_%r7[%f&j%S,XOr%irs!3Wsw%iwx!5Ox!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jMg!8ec%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XOr%irs!9psw%iwx!:|x!Q%i!Q![!0j![!c%i!c!t!0j!t!u!<Y!u!}!0j!}#R%i#R#S!0j#S#T%i#T#f!0j#f#g!<Y#g#o!0j#p#q%i#r$g%i$g~!0jBe!9wT%r7[%t,XOr%irs!:Ws#o%i#p#q%i#r~%iBe!:]T%r7[Or%irs!:ls#o%i#p#q%i#r~%iBe!:sR%r7[%y,XO#o%i#p#q%i#r~%iBe!;TT%r7[%n,XOw%iwx!;dx#o%i#p#q%i#r~%iBe!;iT%r7[Ow%iwx!;xx#o%i#p#q%i#r~%iBe!<PR%r7[%w,XO#o%i#p#q%i#r~%iHP!<c_%r7[%f&j%S,XOr%irs!9psw%iwx!:|x!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jMg!=wg%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XOr%irs!3Wsw%iwx!5Ox!Q%i!Q![!0j![!c%i!c!h!0j!h!i!<Y!i!t!0j!t!u!6v!u!}!0j!}#R%i#R#S!0j#S#T%i#T#U!0j#U#V!6v#V#Y!0j#Y#Z!<Y#Z#o!0j#p#q%i#r$g%i$g~!0jMg!?u_%o`%up%r7[%x!b%z#t%iS%lW%f&j%S,XOr%irs!3Wsw%iwx!5Ox!Q%i!Q![!0j![!c%i!c!}!0j!}#R%i#R#S!0j#S#T%i#T#o!0j#p#q%i#r$g%i$g~!0jG{!AXR!W,X%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iMg!AgX%r7[OY$}YZ%wZ]$}]^%w^#o$}#o#p!BS#p#q$}#q#r!BS#r~$}&f!BcO%o`%up%x!b%z#t%iS%lW<u!BvR!XR%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%iGz!CdT$xQ%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%iGy!C|P![Gm%iS%lW#o#p!DP&Y!D[O%o`%up%x!b%z#tGz!DoT$wQ%o`%up%r7[%x!b%z#t%iS%lWO!_%i!_!`4t!`#o%i#p#q%i#r~%i<u!EaO!]7_%o`%up%x!b%z#t%iS%lWGy!EtR%R,V%o`%up%r7[%x!b%z#t%iS%lWO#o%i#p#q%i#r~%i",tokenizers:[pt,0,1,2,3,4,5,6,7,8,9,10,ct,ut],topRules:{Script:[0,3]},specialized:[{term:188,get:t=>Qt[t]||-1}],tokenPrec:6067});function mt(t,e){switch(t.type.name){case"Number":return{tag:"num",value:Number(e.substring(t.from,t.to))};case"Boolean":return{tag:"bool",value:"True"===e.substring(t.from,t.to)};case"None":return{tag:"none"};default:throw new Error("Not literal")}}function gt(t,e){switch(t.type.name){case"Number":case"Boolean":case"None":return{tag:"literal",value:mt(t,e)};case"VariableName":return{tag:"id",name:e.substring(t.from,t.to)};case"CallExpression":t.firstChild();const o=gt(t,e);t.nextSibling();let l=function(t,e){t.firstChild();const i=[];for(t.nextSibling();")"!==t.type.name;){let r=gt(t,e);i.push(r),t.nextSibling(),t.nextSibling()}return t.parent(),i}(t,e);if(t.parent(),"lookup"===o.tag)return{tag:"method-call",obj:o.obj,method:o.field,arguments:l};if("id"===o.tag){const t=o.name;return"print"===t||"abs"===t?{tag:"builtin1",name:t,arg:l[0]}:"max"===t||"min"===t||"pow"===t?{tag:"builtin2",name:t,left:l[0],right:l[1]}:{tag:"call",name:t,arguments:l}}throw new Error("Unknown target while parsing assignment");case"BinaryExpression":t.firstChild();const h=gt(t,e);switch(t.nextSibling(),e.substring(t.from,t.to)){case"+":n=i.Plus;break;case"-":n=i.Minus;break;case"*":n=i.Mul;break;case"//":n=i.IDiv;break;case"%":n=i.Mod;break;case"==":n=i.Eq;break;case"!=":n=i.Neq;break;case"<=":n=i.Lte;break;case">=":n=i.Gte;break;case"<":n=i.Lt;break;case">":n=i.Gt;break;case"is":n=i.Is;break;case"and":n=i.And;break;case"or":n=i.Or;break;default:throw new Error("Could not parse op at "+t.from+" "+t.to+": "+e.substring(t.from,t.to))}t.nextSibling();const f=gt(t,e);return t.parent(),{tag:"binop",op:n,left:h,right:f};case"ParenthesizedExpression":t.firstChild(),t.nextSibling();var s=gt(t,e);return t.parent(),s;case"UnaryExpression":var n;switch(t.firstChild(),e.substring(t.from,t.to)){case"-":n=r.Neg;break;case"not":n=r.Not;break;default:throw new Error("Could not parse op at "+t.from+" "+t.to+": "+e.substring(t.from,t.to))}return t.nextSibling(),s=gt(t,e),t.parent(),{tag:"uniop",op:n,expr:s};case"MemberExpression":t.firstChild();var O=gt(t,e);t.nextSibling(),t.nextSibling();var a=e.substring(t.from,t.to);return t.parent(),{tag:"lookup",obj:O,field:a};case"self":return{tag:"id",name:"self"};default:throw new Error("Could not parse expr at "+t.from+" "+t.to+": "+e.substring(t.from,t.to))}}function St(t,e){switch(t.node.type.name){case"ReturnStatement":return t.firstChild(),i=t.nextSibling()?gt(t,e):{tag:"literal",value:{tag:"none"}},t.parent(),{tag:"return",value:i};case"AssignStatement":t.firstChild();const a=gt(t,e);t.nextSibling(),t.nextSibling();var i=gt(t,e);if(t.parent(),"lookup"===a.tag)return{tag:"field-assign",obj:a.obj,field:a.field,value:i};if("id"===a.tag)return{tag:"assign",name:a.name,value:i};throw new Error("Unknown target while parsing assignment");case"ExpressionStatement":t.firstChild();const o=gt(t,e);return t.parent(),{tag:"expr",expr:o};case"IfStatement":t.firstChild(),t.nextSibling();var r=gt(t,e);t.nextSibling(),t.firstChild();for(var s=[];t.nextSibling();)s.push(St(t,e));t.parent(),t.nextSibling(),t.nextSibling(),t.firstChild();for(var n=[];t.nextSibling();)n.push(St(t,e));return t.parent(),t.parent(),{tag:"if",cond:r,thn:s,els:n};case"WhileStatement":t.firstChild(),t.nextSibling(),r=gt(t,e),t.nextSibling();var O=[];for(t.firstChild();t.nextSibling();)O.push(St(t,e));return t.parent(),t.parent(),{tag:"while",cond:r,body:O};case"PassStatement":return{tag:"pass"};default:throw new Error("Could not parse stmt at "+t.node.from+" "+t.node.to+": "+e.substring(t.from,t.to))}}function $t(t,e){let i=e.substring(t.from,t.to);switch(i){case"int":return O;case"bool":return a;default:return l(i)}}function xt(t,e){t.firstChild();var i=e.substring(t.from,t.to);if(t.nextSibling(),"TypeDef"!==t.type.name)throw t.parent(),Error("invalid variable init");t.firstChild(),t.nextSibling();const r=$t(t,e);t.parent(),t.nextSibling(),t.nextSibling();var s=mt(t,e);return t.parent(),{name:i,type:r,value:s}}function bt(t,e){t.firstChild(),t.nextSibling();var i=e.substring(t.from,t.to);t.nextSibling();var r=function(t,e){t.firstChild();const i=[];for(t.nextSibling();")"!==t.type.name;){let r=e.substring(t.from,t.to);if(t.nextSibling(),"TypeDef"!==t.type.name)throw new Error("Missed type annotation for parameter "+r);t.firstChild(),t.nextSibling();let s=$t(t,e);t.parent(),t.nextSibling(),i.push({name:r,type:s}),t.nextSibling()}return t.parent(),i}(t,e);t.nextSibling();let s=o;"TypeDef"===t.type.name&&(t.firstChild(),s=$t(t,e),t.parent(),t.nextSibling()),t.firstChild();for(var n=[],O=[],a=t.nextSibling();a&&Pt(t);)n.push(xt(t,e)),a=t.nextSibling();for(;a;)O.push(St(t,e)),a=t.nextSibling();return t.parent(),t.parent(),{name:i,parameters:r,ret:s,inits:n,body:O}}function yt(t,e){const i=[],r=[];t.firstChild(),t.nextSibling();const s=e.substring(t.from,t.to);for(t.nextSibling(),t.nextSibling(),t.firstChild();t.nextSibling();)if(Pt(t))i.push(xt(t,e));else{if(!Lt(t))throw new Error(`Could not parse the body of class: ${s}`);r.push(bt(t,e))}return t.parent(),t.parent(),r.find((t=>"__init__"===t.name))||r.push({name:"__init__",parameters:[{name:"self",type:l(s)}],ret:o,inits:[],body:[]}),{name:s,fields:i,methods:r}}function Pt(t,e){if("AssignStatement"===t.type.name){t.firstChild(),t.nextSibling();const e="TypeDef"===t.type.name;return t.parent(),e}return!1}function Lt(t,e){return"FunctionDefinition"===t.type.name}function Xt(t,e){return"ClassDefinition"===t.type.name}function wt(t){return function(t,e){switch(t.node.type.name){case"Script":const r=[],s=[],n=[],O=[];for(var i=t.firstChild();i;){if(Pt(t))r.push(xt(t,e));else if(Lt(t))s.push(bt(t,e));else{if(!Xt(t))break;n.push(yt(t,e))}i=t.nextSibling()}for(;i;)O.push(St(t,e)),i=t.nextSibling();return t.parent(),{funs:s,inits:r,classes:n,stmts:O};default:throw new Error("Could not parse program at "+t.node.from+" "+t.node.to)}}(dt.parse(t).cursor(),t)}class Ut extends Error{constructor(t){const e=new.target.prototype;super(t),this.__proto__=e}}const qt=new Map;qt.set("abs",[[O],O]),qt.set("max",[[O,O],O]),qt.set("min",[[O,O],O]),qt.set("pow",[[O,O],O]),qt.set("print",[[l("object")],O]);const kt={globals:new Map,functions:qt,classes:new Map};function vt(){return{vars:new Map,expectedRet:o,topLevel:!0}}function Rt(t,e){return t===e||"class"===t.tag&&"class"===e.tag&&t.name===e.name}function _t(t){return"none"===t.tag||"class"===t.tag}function Tt(t,e,i){return function(t,e,i){return Rt(e,i)||"none"===e.tag&&"class"===i.tag}(0,e,i)}function jt(t,e){const i=vt(),r=function(t,e){const i=new Map(t.globals),r=new Map(t.functions),s=new Map(t.classes);return e.inits.forEach((t=>i.set(t.name,t.type))),e.funs.forEach((t=>r.set(t.name,[t.parameters.map((t=>t.type)),t.ret]))),e.classes.forEach((t=>{const e=new Map,i=new Map;t.fields.forEach((t=>e.set(t.name,t.type))),t.methods.forEach((t=>i.set(t.name,[t.parameters.map((t=>t.type)),t.ret]))),s.set(t.name,[e,i])})),{globals:i,functions:r,classes:s}}(t,e),s=e.inits.map((t=>Et(0,t))),n=e.funs.map((t=>Gt(r,t))),O=e.classes.map((t=>function(t,e){const i=e.fields.map((t=>Et(0,t))),r=e.methods.map((e=>Gt(t,e)));return{a:o,name:e.name,fields:i,methods:r}}(r,t))),a=Vt(r,i,e.stmts);var l=o;a.length&&(l=a[a.length-1].a);for(let t of i.vars.keys())r.globals.set(t,i.vars.get(t));return[{a:l,inits:s,funs:n,classes:O,stmts:a},r]}function Et(t,e){const i=Yt(e.value);if(Tt(0,i,e.type))return{...e,a:o};throw new Ut("Expected type `"+e.type+"`; got type `"+i+"`")}function Gt(t,e){var i=vt();i.expectedRet=e.ret,i.topLevel=!1,e.parameters.forEach((t=>i.vars.set(t.name,t.type))),e.inits.forEach((t=>i.vars.set(t.name,Et(0,t).type)));const r=Vt(t,i,e.body);return{...e,a:o,body:r}}function Vt(t,e,i){return i.map((i=>function(t,e,i){switch(i.tag){case"assign":const O=Wt(t,e,i.value);var r;if(e.vars.has(i.name))r=e.vars.get(i.name);else{if(!t.globals.has(i.name))throw new Ut("Unbound id: "+i.name);r=t.globals.get(i.name)}if(!Tt(0,O.a,r))throw new Ut("Non-assignable types");return{a:o,tag:i.tag,name:i.name,value:O};case"expr":const l=Wt(t,e,i.expr);return{a:l.a,tag:i.tag,expr:l};case"if":var s=Wt(t,e,i.cond);const h=Vt(t,e,i.thn),f=h[h.length-1].a,c=Vt(t,e,i.els),u=c[c.length-1].a;if(s.a!==a)throw new Ut("Condition Expression Must be a bool");if(f!==u)throw new Ut("Types of then and else branches must match");return{a:f,tag:i.tag,cond:s,thn:h,els:c};case"return":if(e.topLevel)throw new Ut("cannot return outside of functions");const p=Wt(t,e,i.value);if(!Tt(0,p.a,e.expectedRet))throw new Ut("expected return type `"+e.expectedRet.name+"`; got type `"+p.a.name+"`");return{a:p.a,tag:i.tag,value:p};case"while":s=Wt(t,e,i.cond);const Q=Vt(t,e,i.body);if(!Rt(s.a,a))throw new Ut("Condition Expression Must be a bool");return{a:o,tag:i.tag,cond:s,body:Q};case"pass":return{a:o,tag:i.tag};case"field-assign":var n=Wt(t,e,i.obj);const d=Wt(t,e,i.value);if("class"!==n.a.tag)throw new Ut("field assignments require an object");if(!t.classes.has(n.a.name))throw new Ut("field assignment on an unknown class");const[m,g]=t.classes.get(n.a.name);if(!m.has(i.field))throw new Ut(`could not find field ${i.field} in class ${n.a.name}`);if(!Tt(0,d.a,m.get(i.field)))throw new Ut(`could not assign value of type: ${d.a}; field ${i.field} expected type: ${m.get(i.field)}`);return{...i,a:o,obj:n,value:d}}}(t,e,i)))}function Wt(t,e,s){switch(s.tag){case"literal":return{...s,a:Yt(s.value)};case"binop":const f=Wt(t,e,s.left),c=Wt(t,e,s.right),u={...s,left:f,right:c};switch(s.op){case i.Plus:case i.Minus:case i.Mul:case i.IDiv:case i.Mod:if(Rt(f.a,O)&&Rt(c.a,O))return{a:O,...u};throw new Ut("Type mismatch for numeric op"+s.op);case i.Eq:case i.Neq:if(Rt(f.a,c.a))return{a,...u};throw new Ut("Type mismatch for op"+s.op);case i.Lte:case i.Gte:case i.Lt:case i.Gt:if(Rt(f.a,O)&&Rt(c.a,O))return{a,...u};throw new Ut("Type mismatch for op"+s.op);case i.And:case i.Or:if(Rt(f.a,a)&&Rt(c.a,a))return{a,...u};throw new Ut("Type mismatch for boolean op"+s.op);case i.Is:if(!_t(f.a)||!_t(c.a))throw new Ut("is operands must be objects");return{a,...u}}case"uniop":const p=Wt(t,e,s.expr),Q={...s,a:p.a,expr:p};switch(s.op){case r.Neg:if(Rt(p.a,O))return Q;throw new Ut("Type mismatch for op"+s.op);case r.Not:if(Rt(p.a,a))return Q;throw new Ut("Type mismatch for op"+s.op)}case"id":if(e.vars.has(s.name))return{a:e.vars.get(s.name),...s};if(t.globals.has(s.name))return{a:t.globals.get(s.name),...s};throw new Ut("Unbound id: "+s.name);case"builtin1":if("print"===s.name){const i=Wt(t,e,s.arg);return{...s,a:i.a,arg:i}}if(t.functions.has(s.name)){const[[i],r]=t.functions.get(s.name),n=Wt(t,e,s.arg);if(Tt(0,n.a,i))return{...s,a:r,arg:n};throw new TypeError("Function call type mismatch: "+s.name)}throw new TypeError("Undefined function: "+s.name);case"builtin2":if(t.functions.has(s.name)){const[[i,r],n]=t.functions.get(s.name),O=Wt(t,e,s.left),a=Wt(t,e,s.right);if(Tt(0,i,O.a)&&Tt(0,r,a.a))return{...s,a:n,left:O,right:a};throw new TypeError("Function call type mismatch: "+s.name)}throw new TypeError("Undefined function: "+s.name);case"call":if(t.classes.has(s.name)){const e={a:l(s.name),tag:"construct",name:s.name},[i,r]=t.classes.get(s.name);if(r.has("__init__")){const[t,i]=r.get("__init__");if(s.arguments.length!==t.length-1)throw new Ut("__init__ didn't receive the correct number of arguments from the constructor");if(i!==o)throw new Ut("__init__  must have a void return type");return e}return e}if(t.functions.has(s.name)){const[i,r]=t.functions.get(s.name),n=s.arguments.map((i=>Wt(t,e,i)));if(i.length===s.arguments.length&&n.every(((t,e)=>t.a===i[e])))return{...s,a:r,arguments:s.arguments};throw new TypeError("Function call type mismatch: "+s.name)}throw new TypeError("Undefined function: "+s.name);case"lookup":if("class"===(n=Wt(t,e,s.obj)).a.tag){if(t.classes.has(n.a.name)){const[e,i]=t.classes.get(n.a.name);if(e.has(s.field))return{...s,a:e.get(s.field),obj:n};throw new Ut(`could not found field ${s.field} in class ${n.a.name}`)}throw new Ut("field lookup on an unknown class")}throw new Ut("field lookups require an object");case"method-call":var n=Wt(t,e,s.obj),h=s.arguments.map((i=>Wt(t,e,i)));if("class"===n.a.tag){if(t.classes.has(n.a.name)){const[e,i]=t.classes.get(n.a.name);if(i.has(s.method)){const[t,e]=i.get(s.method),r=[n].concat(h);if(t.length===r.length&&t.every(((t,e)=>Tt(0,r[e].a,t))))return{...s,a:e,obj:n,arguments:h};throw new Ut(`Method call type mismatch: ${s.method} --- callArgs: ${JSON.stringify(r)}, methodArgs: ${JSON.stringify(t)}`)}throw new Ut(`could not found method ${s.method} in class ${n.a.name}`)}throw new Ut("method call on an unknown class")}throw new Ut("method calls require an object");default:throw new Ut(`unimplemented type checking for expr: ${s}`)}}function Yt(t){switch(t.tag){case"bool":return a;case"num":return O;case"none":return o}}if("undefined"!=typeof process){const t=process.on;process.on=(...e)=>"uncaughtException"===e[0]?void 0:t.apply(process,e)}async function zt(t,e){const i=wt(t),[r,O]=jt(e.typeEnv,i),a=r.a;var l="",f="";a!==o&&(l="(result i32)",f="(local.get $$last)");let Q=e.env.globals.size;const d=function(t,e){const i=function(t,e){const i=new Map(t.globals),r=new Map(t.classes);var s=t.offset;return e.inits.forEach((t=>{i.set(t.name,s),s+=1})),e.classes.forEach((t=>{const e=new Map;t.fields.forEach(((t,i)=>e.set(t.name,[i,t.value]))),r.set(t.name,e)})),{globals:i,classes:r,locals:t.locals,offset:s}}(e,t),r=new Set;r.add("$last"),r.forEach(e.locals.add,e.locals);const s=h(r),n=[];t.funs.forEach((t=>{n.push(p(t,i).join("\n"))}));const O=t.classes.map((t=>function(t,e){const i=[...t.methods];return i.forEach((e=>e.name=`${t.name}$${e.name}`)),i.map((t=>p(t,e))).flat()}(t,i))).flat(),a=n.concat(O).join("\n\n"),o=t.inits.map((t=>u(t,i))).flat(),l=t.stmts.map((t=>c(t,i))),f=s.concat(o.concat([].concat.apply([],l)));return i.locals.clear(),{functions:a,mainSource:f.join("\n"),newEnv:i}}(r,e.env);let m=d.newEnv.globals.size;const g=e.importObject;if(!g.js){const t=new WebAssembly.Memory({initial:2e3,maximum:2e3});g.js={memory:t}}const S=new Int32Array(g.js.memory.buffer);let $=S[0];console.log("before updating: ",$),S[0]=$+4*(m-Q),console.log("after updating: ",S[0]);const x=`(module\n    (import "js" "memory" (memory 1))\n    (func $print_num (import "imports" "print_num") (param i32) (result i32))\n    (func $print_bool (import "imports" "print_bool") (param i32) (result i32))\n    (func $print_none (import "imports" "print_none") (param i32) (result i32))\n    (func $abs (import "imports" "abs") (param i32) (result i32))\n    (func $min (import "imports" "min") (param i32) (param i32) (result i32))\n    (func $max (import "imports" "max") (param i32) (param i32) (result i32))\n    (func $pow (import "imports" "pow") (param i32) (param i32) (result i32))\n    ${e.functions}\n    ${d.functions}\n    (func (export "exported_func") ${l}\n      ${d.mainSource}\n      ${f}\n    )\n  )`;return console.log(x),[n(a,await async function(t,e){var i=(await s()()).parseWat("test.wat",t).toBinary({});return(await WebAssembly.instantiate(i.buffer,e)).instance.exports.exported_func()}(x,g)),d.newEnv,O,d.functions]}class Ct{constructor(t){if(this.importObject=t,!t.js){const t=new WebAssembly.Memory({initial:2e3,maximum:2e3});new Int32Array(t.buffer)[0]=4,this.importObject.js={memory:t}}this.currentEnv={globals:new Map,classes:new Map,locals:new Set,offset:1},this.currentTypeEnv=kt,this.functions=""}async run(t){const e={importObject:this.importObject,env:this.currentEnv,typeEnv:this.currentTypeEnv,functions:this.functions},[i,r,s,n]=await zt(t,e);return this.currentEnv=r,this.currentTypeEnv=s,this.functions+=n,i}async tc(t){this.importObject,this.currentEnv,this.currentTypeEnv,this.functions;const e=wt(t),[i,r]=await jt(this.currentTypeEnv,e);return i.a}}function Nt(t,e){console.log("Logging from WASM: ",e);const i=document.createElement("pre");return document.getElementById("output").appendChild(i),i.innerText=function(t,e){switch(t.tag){case"number":return e.toString();case"bool":return e?"True":"False";case"none":return"None";case"class":return t.name}}(t,e),e}document.addEventListener("DOMContentLoaded",(function(){var t={imports:{print_num:t=>Nt(O,t),print_bool:t=>Nt(a,t),print_none:t=>Nt(o,t),abs:Math.abs,min:Math.min,max:Math.max,pow:Math.pow}},e=new Ct(t);function i(t){if(void 0===t)return void console.log("skip");if("none"===t.tag)return;const e=document.createElement("pre");switch(document.getElementById("output").appendChild(e),t.tag){case"num":e.innerText=String(t.value);break;case"bool":e.innerHTML=t.value?"True":"False";break;case"object":e.innerHTML=`<${t.name} object at ${t.address}`;break;default:throw new Error(`Could not render value: ${t}`)}}function r(t){const e=document.createElement("pre");document.getElementById("output").appendChild(e),e.setAttribute("style","color: red"),e.innerText=String(t)}document.getElementById("run").addEventListener("click",(function(s){e=new Ct(t);const n=document.getElementById("user-code");document.getElementById("output").innerHTML="",e.run(n.value).then((t=>{i(t),console.log("run finished")})).catch((t=>{r(t),console.log("run failed",t)}))})),function(){document.getElementById("output").innerHTML="";const t=document.getElementById("next-code");t.addEventListener("keypress",(s=>{if(s.shiftKey&&"Enter"===s.key);else if("Enter"===s.key){s.preventDefault();const n=document.createElement("div"),O=document.createElement("span");O.innerText="»",n.appendChild(O);const a=document.createElement("textarea");a.disabled=!0,a.className="repl-code",n.appendChild(a),document.getElementById("output").appendChild(n);const o=t.value;a.value=o,t.value="",e.run(o).then((t=>{i(t),console.log("run finished")})).catch((t=>{r(t),console.log("run failed",t)}))}}))}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,